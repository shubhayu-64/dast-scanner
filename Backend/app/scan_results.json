{
  "Scan Results": {
    "alerts": [
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "10",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/robots.txt",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "0",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "12",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/sitemap.xml",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "1",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "12",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/sitemap.xml",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "3",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "10",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/robots.txt",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "4",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "13",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "6",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "public, max-age=600",
        "pluginId": "10015",
        "cweid": "525",
        "confidence": "Low",
        "wascid": "13",
        "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
        "messageId": "13",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com",
        "tags": {
          "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/",
        "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
        "alert": "Re-examine Cache-control Directives",
        "param": "Cache-Control",
        "attack": "",
        "name": "Re-examine Cache-control Directives",
        "risk": "Informational",
        "id": "13",
        "alertRef": "10015"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "13",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "14",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "The presence of the 'Age' header indicates that that a HTTP/1.1 compliant caching server is in use.",
        "method": "GET",
        "evidence": "Age: 0",
        "pluginId": "10050",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as \"proxy\" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ",
        "messageId": "13",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com",
        "tags": {
          "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttp://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html (obsoleted by rfc7234)",
        "solution": "Validate that the response does not contain sensitive, personal or user-specific information.  If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.",
        "alert": "Retrieved from Cache",
        "param": "",
        "attack": "",
        "name": "Retrieved from Cache",
        "risk": "Informational",
        "id": "16",
        "alertRef": "10050"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "13",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "17",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "53",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/index.html",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "18",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "13",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "19",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "public, max-age=600",
        "pluginId": "10015",
        "cweid": "525",
        "confidence": "Low",
        "wascid": "13",
        "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
        "messageId": "53",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/index.html",
        "tags": {
          "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/",
        "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
        "alert": "Re-examine Cache-control Directives",
        "param": "Cache-Control",
        "attack": "",
        "name": "Re-examine Cache-control Directives",
        "risk": "Informational",
        "id": "25",
        "alertRef": "10015"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "53",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/index.html",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "26",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "The presence of the 'Age' header indicates that that a HTTP/1.1 compliant caching server is in use.",
        "method": "GET",
        "evidence": "Age: 1",
        "pluginId": "10050",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as \"proxy\" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ",
        "messageId": "53",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/index.html",
        "tags": {
          "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttp://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html (obsoleted by rfc7234)",
        "solution": "Validate that the response does not contain sensitive, personal or user-specific information.  If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.",
        "alert": "Retrieved from Cache",
        "param": "",
        "attack": "",
        "name": "Retrieved from Cache",
        "risk": "Informational",
        "id": "30",
        "alertRef": "10050"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "57",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/index.html",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "31",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "53",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/index.html",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "32",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "53",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/index.html",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "33",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "58",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/badscriptimport/index.html",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "36",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "public, max-age=600",
        "pluginId": "10015",
        "cweid": "525",
        "confidence": "Low",
        "wascid": "13",
        "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
        "messageId": "58",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/badscriptimport/index.html",
        "tags": {
          "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/",
        "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
        "alert": "Re-examine Cache-control Directives",
        "param": "Cache-Control",
        "attack": "",
        "name": "Re-examine Cache-control Directives",
        "risk": "Informational",
        "id": "38",
        "alertRef": "10015"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "58",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/badscriptimport/index.html",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "40",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "public, max-age=600",
        "pluginId": "10015",
        "cweid": "525",
        "confidence": "Low",
        "wascid": "13",
        "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
        "messageId": "57",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/index.html",
        "tags": {
          "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/",
        "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
        "alert": "Re-examine Cache-control Directives",
        "param": "Cache-Control",
        "attack": "",
        "name": "Re-examine Cache-control Directives",
        "risk": "Informational",
        "id": "41",
        "alertRef": "10015"
      },
      {
        "sourceid": "3",
        "other": "192.168.1.2\n192.168.1.2\n",
        "method": "GET",
        "evidence": "192.168.1.2",
        "pluginId": "2",
        "cweid": "200",
        "confidence": "Medium",
        "wascid": "13",
        "description": "A private IP (such as 10.x.x.x, 172.x.x.x, 192.168.x.x) or an Amazon EC2 private hostname (for example, ip-10-0-56-78) has been found in the HTTP response body. This information might be helpful for further attacks targeting internal systems.",
        "messageId": "58",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/badscriptimport/index.html",
        "tags": {
          "OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
          "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html"
        },
        "reference": "https://tools.ietf.org/html/rfc1918",
        "solution": "Remove the private IP address from the HTTP response body.  For comments, use JSP/ASP/PHP comment instead of HTML/JavaScript comment which can be seen by client browsers.",
        "alert": "Private IP Disclosure",
        "param": "",
        "attack": "",
        "name": "Private IP Disclosure",
        "risk": "Low",
        "id": "42",
        "alertRef": "2"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "57",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/index.html",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "43",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "The presence of the 'Age' header indicates that that a HTTP/1.1 compliant caching server is in use.",
        "method": "GET",
        "evidence": "Age: 1",
        "pluginId": "10050",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as \"proxy\" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ",
        "messageId": "58",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/badscriptimport/index.html",
        "tags": {
          "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttp://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html (obsoleted by rfc7234)",
        "solution": "Validate that the response does not contain sensitive, personal or user-specific information.  If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.",
        "alert": "Retrieved from Cache",
        "param": "",
        "attack": "",
        "name": "Retrieved from Cache",
        "risk": "Informational",
        "id": "44",
        "alertRef": "10050"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "58",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/badscriptimport/index.html",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "45",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "58",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/badscriptimport/index.html",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "48",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "89",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/index.html",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "50",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "The presence of the 'Age' header indicates that that a HTTP/1.1 compliant caching server is in use.",
        "method": "GET",
        "evidence": "Age: 1",
        "pluginId": "10050",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as \"proxy\" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ",
        "messageId": "57",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/index.html",
        "tags": {
          "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttp://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html (obsoleted by rfc7234)",
        "solution": "Validate that the response does not contain sensitive, personal or user-specific information.  If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.",
        "alert": "Retrieved from Cache",
        "param": "",
        "attack": "",
        "name": "Retrieved from Cache",
        "risk": "Informational",
        "id": "53",
        "alertRef": "10050"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "57",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/index.html",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "55",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "94",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/cors/index.html",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "56",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "57",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/index.html",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "57",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "public, max-age=600",
        "pluginId": "10015",
        "cweid": "525",
        "confidence": "Low",
        "wascid": "13",
        "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
        "messageId": "89",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/index.html",
        "tags": {
          "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/",
        "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
        "alert": "Re-examine Cache-control Directives",
        "param": "Cache-Control",
        "attack": "",
        "name": "Re-examine Cache-control Directives",
        "risk": "Informational",
        "id": "58",
        "alertRef": "10015"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "89",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/index.html",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "59",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "public, max-age=600",
        "pluginId": "10015",
        "cweid": "525",
        "confidence": "Low",
        "wascid": "13",
        "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
        "messageId": "94",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/cors/index.html",
        "tags": {
          "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/",
        "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
        "alert": "Re-examine Cache-control Directives",
        "param": "Cache-Control",
        "attack": "",
        "name": "Re-examine Cache-control Directives",
        "risk": "Informational",
        "id": "61",
        "alertRef": "10015"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "94",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/cors/index.html",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "62",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "The presence of the 'Age' header indicates that that a HTTP/1.1 compliant caching server is in use.",
        "method": "GET",
        "evidence": "Age: 1",
        "pluginId": "10050",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as \"proxy\" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ",
        "messageId": "89",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/index.html",
        "tags": {
          "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttp://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html (obsoleted by rfc7234)",
        "solution": "Validate that the response does not contain sensitive, personal or user-specific information.  If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.",
        "alert": "Retrieved from Cache",
        "param": "",
        "attack": "",
        "name": "Retrieved from Cache",
        "risk": "Informational",
        "id": "63",
        "alertRef": "10050"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "89",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/index.html",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "64",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "89",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/index.html",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "67",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "The presence of the 'Age' header indicates that that a HTTP/1.1 compliant caching server is in use.",
        "method": "GET",
        "evidence": "Age: 1",
        "pluginId": "10050",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as \"proxy\" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ",
        "messageId": "94",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/cors/index.html",
        "tags": {
          "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttp://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html (obsoleted by rfc7234)",
        "solution": "Validate that the response does not contain sensitive, personal or user-specific information.  If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.",
        "alert": "Retrieved from Cache",
        "param": "",
        "attack": "",
        "name": "Retrieved from Cache",
        "risk": "Informational",
        "id": "68",
        "alertRef": "10050"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "94",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/cors/index.html",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "69",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "94",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/cors/index.html",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "72",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "219",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/flashinjection/index.html",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "74",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "public, max-age=600",
        "pluginId": "10015",
        "cweid": "525",
        "confidence": "Low",
        "wascid": "13",
        "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
        "messageId": "219",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/flashinjection/index.html",
        "tags": {
          "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/",
        "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
        "alert": "Re-examine Cache-control Directives",
        "param": "Cache-Control",
        "attack": "",
        "name": "Re-examine Cache-control Directives",
        "risk": "Informational",
        "id": "77",
        "alertRef": "10015"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "219",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/flashinjection/index.html",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "78",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "The presence of the 'Age' header indicates that that a HTTP/1.1 compliant caching server is in use.",
        "method": "GET",
        "evidence": "Age: 0",
        "pluginId": "10050",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as \"proxy\" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ",
        "messageId": "219",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/flashinjection/index.html",
        "tags": {
          "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttp://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html (obsoleted by rfc7234)",
        "solution": "Validate that the response does not contain sensitive, personal or user-specific information.  If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.",
        "alert": "Retrieved from Cache",
        "param": "",
        "attack": "",
        "name": "Retrieved from Cache",
        "risk": "Informational",
        "id": "81",
        "alertRef": "10050"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "227",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/mixedcontent/index.html",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "82",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "The presence of the 'Age' header indicates that that a HTTP/1.1 compliant caching server is in use.",
        "method": "GET",
        "evidence": "Age: 0",
        "pluginId": "10050",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as \"proxy\" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ",
        "messageId": "218",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/cors/index.html",
        "tags": {
          "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttp://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html (obsoleted by rfc7234)",
        "solution": "Validate that the response does not contain sensitive, personal or user-specific information.  If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.",
        "alert": "Retrieved from Cache",
        "param": "",
        "attack": "",
        "name": "Retrieved from Cache",
        "risk": "Informational",
        "id": "83",
        "alertRef": "10050"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "public, max-age=600",
        "pluginId": "10015",
        "cweid": "525",
        "confidence": "Low",
        "wascid": "13",
        "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
        "messageId": "227",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/mixedcontent/index.html",
        "tags": {
          "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/",
        "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
        "alert": "Re-examine Cache-control Directives",
        "param": "Cache-Control",
        "attack": "",
        "name": "Re-examine Cache-control Directives",
        "risk": "Informational",
        "id": "86",
        "alertRef": "10015"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "219",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/flashinjection/index.html",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "87",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "227",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/mixedcontent/index.html",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "88",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "219",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/flashinjection/index.html",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "90",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "tag=script src=http://public-firing-range.appspot.com/mixedcontent/script.js\n",
        "method": "GET",
        "evidence": "http://public-firing-range.appspot.com/mixedcontent/script.js",
        "pluginId": "10040",
        "cweid": "311",
        "confidence": "Medium",
        "wascid": "4",
        "description": "The page includes mixed content, that is content accessed via HTTP instead of HTTPS.",
        "messageId": "227",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/mixedcontent/index.html",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html",
          "WSTG-v42-CRYP-03": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/03-Testing_for_Sensitive_Information_Sent_via_Unencrypted_Channels"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Protection_Cheat_Sheet.html",
        "solution": "A page that is available over SSL/TLS must be comprised completely of content which is transmitted over SSL/TLS.\nThe page must not contain any content that is transmitted over unencrypted HTTP.\n This includes content from third party sites.",
        "alert": "Secure Pages Include Mixed Content (Including Scripts)",
        "param": "",
        "attack": "",
        "name": "Secure Pages Include Mixed Content (Including Scripts)",
        "risk": "Medium",
        "id": "91",
        "alertRef": "10040"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script src=\"http://public-firing-range.appspot.com/mixedcontent/script.js\">\n</script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "227",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/mixedcontent/index.html",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "93",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "The presence of the 'Age' header indicates that that a HTTP/1.1 compliant caching server is in use.",
        "method": "GET",
        "evidence": "Age: 0",
        "pluginId": "10050",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as \"proxy\" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ",
        "messageId": "227",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/mixedcontent/index.html",
        "tags": {
          "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttp://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html (obsoleted by rfc7234)",
        "solution": "Validate that the response does not contain sensitive, personal or user-specific information.  If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.",
        "alert": "Retrieved from Cache",
        "param": "",
        "attack": "",
        "name": "Retrieved from Cache",
        "risk": "Informational",
        "id": "94",
        "alertRef": "10050"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "227",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/mixedcontent/index.html",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "95",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "The presence of the 'Age' header indicates that that a HTTP/1.1 compliant caching server is in use.",
        "method": "GET",
        "evidence": "Age: 0",
        "pluginId": "10050",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as \"proxy\" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ",
        "messageId": "226",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/index.html",
        "tags": {
          "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttp://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html (obsoleted by rfc7234)",
        "solution": "Validate that the response does not contain sensitive, personal or user-specific information.  If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.",
        "alert": "Retrieved from Cache",
        "param": "",
        "attack": "",
        "name": "Retrieved from Cache",
        "risk": "Informational",
        "id": "96",
        "alertRef": "10050"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "227",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/mixedcontent/index.html",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "97",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "230",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/index.html",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "99",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "237",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/index.html",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "101",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "246",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/tags/index.html",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "102",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "245",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/remoteinclude/index.html",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "103",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "public, max-age=600",
        "pluginId": "10015",
        "cweid": "525",
        "confidence": "Low",
        "wascid": "13",
        "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
        "messageId": "245",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/remoteinclude/index.html",
        "tags": {
          "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/",
        "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
        "alert": "Re-examine Cache-control Directives",
        "param": "Cache-Control",
        "attack": "",
        "name": "Re-examine Cache-control Directives",
        "risk": "Informational",
        "id": "104",
        "alertRef": "10015"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "245",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/remoteinclude/index.html",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "105",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "public, max-age=600",
        "pluginId": "10015",
        "cweid": "525",
        "confidence": "Low",
        "wascid": "13",
        "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
        "messageId": "246",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/tags/index.html",
        "tags": {
          "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/",
        "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
        "alert": "Re-examine Cache-control Directives",
        "param": "Cache-Control",
        "attack": "",
        "name": "Re-examine Cache-control Directives",
        "risk": "Informational",
        "id": "106",
        "alertRef": "10015"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "public, max-age=600",
        "pluginId": "10015",
        "cweid": "525",
        "confidence": "Low",
        "wascid": "13",
        "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
        "messageId": "230",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/index.html",
        "tags": {
          "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/",
        "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
        "alert": "Re-examine Cache-control Directives",
        "param": "Cache-Control",
        "attack": "",
        "name": "Re-examine Cache-control Directives",
        "risk": "Informational",
        "id": "107",
        "alertRef": "10015"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "246",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/tags/index.html",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "108",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "public, max-age=600",
        "pluginId": "10015",
        "cweid": "525",
        "confidence": "Low",
        "wascid": "13",
        "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
        "messageId": "237",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/index.html",
        "tags": {
          "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/",
        "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
        "alert": "Re-examine Cache-control Directives",
        "param": "Cache-Control",
        "attack": "",
        "name": "Re-examine Cache-control Directives",
        "risk": "Informational",
        "id": "109",
        "alertRef": "10015"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "230",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/index.html",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "110",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "237",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/index.html",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "111",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "The presence of the 'Age' header indicates that that a HTTP/1.1 compliant caching server is in use.",
        "method": "GET",
        "evidence": "Age: 0",
        "pluginId": "10050",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as \"proxy\" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ",
        "messageId": "245",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/remoteinclude/index.html",
        "tags": {
          "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttp://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html (obsoleted by rfc7234)",
        "solution": "Validate that the response does not contain sensitive, personal or user-specific information.  If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.",
        "alert": "Retrieved from Cache",
        "param": "",
        "attack": "",
        "name": "Retrieved from Cache",
        "risk": "Informational",
        "id": "112",
        "alertRef": "10050"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "245",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/remoteinclude/index.html",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "113",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "245",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/remoteinclude/index.html",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "114",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "The presence of the 'Age' header indicates that that a HTTP/1.1 compliant caching server is in use.",
        "method": "GET",
        "evidence": "Age: 0",
        "pluginId": "10050",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as \"proxy\" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ",
        "messageId": "246",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/tags/index.html",
        "tags": {
          "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttp://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html (obsoleted by rfc7234)",
        "solution": "Validate that the response does not contain sensitive, personal or user-specific information.  If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.",
        "alert": "Retrieved from Cache",
        "param": "",
        "attack": "",
        "name": "Retrieved from Cache",
        "risk": "Informational",
        "id": "115",
        "alertRef": "10050"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "246",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/tags/index.html",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "116",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "246",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/tags/index.html",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "117",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "The presence of the 'Age' header indicates that that a HTTP/1.1 compliant caching server is in use.",
        "method": "GET",
        "evidence": "Age: 0",
        "pluginId": "10050",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as \"proxy\" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ",
        "messageId": "237",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/index.html",
        "tags": {
          "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttp://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html (obsoleted by rfc7234)",
        "solution": "Validate that the response does not contain sensitive, personal or user-specific information.  If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.",
        "alert": "Retrieved from Cache",
        "param": "",
        "attack": "",
        "name": "Retrieved from Cache",
        "risk": "Informational",
        "id": "118",
        "alertRef": "10050"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "237",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/index.html",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "119",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "237",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/index.html",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "120",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "251",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/index.html",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "121",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "The presence of the 'Age' header indicates that that a HTTP/1.1 compliant caching server is in use.",
        "method": "GET",
        "evidence": "Age: 0",
        "pluginId": "10050",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as \"proxy\" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ",
        "messageId": "230",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/index.html",
        "tags": {
          "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttp://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html (obsoleted by rfc7234)",
        "solution": "Validate that the response does not contain sensitive, personal or user-specific information.  If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.",
        "alert": "Retrieved from Cache",
        "param": "",
        "attack": "",
        "name": "Retrieved from Cache",
        "risk": "Informational",
        "id": "122",
        "alertRef": "10050"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "230",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/index.html",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "123",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "230",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/index.html",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "125",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "public, max-age=600",
        "pluginId": "10015",
        "cweid": "525",
        "confidence": "Low",
        "wascid": "13",
        "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
        "messageId": "251",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/index.html",
        "tags": {
          "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/",
        "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
        "alert": "Re-examine Cache-control Directives",
        "param": "Cache-Control",
        "attack": "",
        "name": "Re-examine Cache-control Directives",
        "risk": "Informational",
        "id": "128",
        "alertRef": "10015"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "251",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/index.html",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "129",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "273",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/redirect/index.html",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "143",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "The presence of the 'Age' header indicates that that a HTTP/1.1 compliant caching server is in use.",
        "method": "GET",
        "evidence": "Age: 0",
        "pluginId": "10050",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as \"proxy\" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ",
        "messageId": "251",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/index.html",
        "tags": {
          "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttp://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html (obsoleted by rfc7234)",
        "solution": "Validate that the response does not contain sensitive, personal or user-specific information.  If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.",
        "alert": "Retrieved from Cache",
        "param": "",
        "attack": "",
        "name": "Retrieved from Cache",
        "risk": "Informational",
        "id": "145",
        "alertRef": "10050"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "251",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/index.html",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "147",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "public, max-age=600",
        "pluginId": "10015",
        "cweid": "525",
        "confidence": "Low",
        "wascid": "13",
        "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
        "messageId": "273",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/redirect/index.html",
        "tags": {
          "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/",
        "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
        "alert": "Re-examine Cache-control Directives",
        "param": "Cache-Control",
        "attack": "",
        "name": "Re-examine Cache-control Directives",
        "risk": "Informational",
        "id": "150",
        "alertRef": "10015"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "273",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/redirect/index.html",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "151",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "251",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/index.html",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "152",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "The presence of the 'Age' header indicates that that a HTTP/1.1 compliant caching server is in use.",
        "method": "GET",
        "evidence": "Age: 0",
        "pluginId": "10050",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as \"proxy\" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ",
        "messageId": "273",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/redirect/index.html",
        "tags": {
          "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttp://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html (obsoleted by rfc7234)",
        "solution": "Validate that the response does not contain sensitive, personal or user-specific information.  If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.",
        "alert": "Retrieved from Cache",
        "param": "",
        "attack": "",
        "name": "Retrieved from Cache",
        "risk": "Informational",
        "id": "153",
        "alertRef": "10050"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "273",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/redirect/index.html",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "154",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "273",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/redirect/index.html",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "156",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "275",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/leakedcookie/index.html",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "158",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "public, max-age=600",
        "pluginId": "10015",
        "cweid": "525",
        "confidence": "Low",
        "wascid": "13",
        "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
        "messageId": "275",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/leakedcookie/index.html",
        "tags": {
          "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/",
        "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
        "alert": "Re-examine Cache-control Directives",
        "param": "Cache-Control",
        "attack": "",
        "name": "Re-examine Cache-control Directives",
        "risk": "Informational",
        "id": "161",
        "alertRef": "10015"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "275",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/leakedcookie/index.html",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "163",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "The presence of the 'Age' header indicates that that a HTTP/1.1 compliant caching server is in use.",
        "method": "GET",
        "evidence": "Age: 0",
        "pluginId": "10050",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as \"proxy\" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ",
        "messageId": "275",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/leakedcookie/index.html",
        "tags": {
          "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttp://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html (obsoleted by rfc7234)",
        "solution": "Validate that the response does not contain sensitive, personal or user-specific information.  If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.",
        "alert": "Retrieved from Cache",
        "param": "",
        "attack": "",
        "name": "Retrieved from Cache",
        "risk": "Informational",
        "id": "165",
        "alertRef": "10050"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "275",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/leakedcookie/index.html",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "166",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "275",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/leakedcookie/index.html",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "168",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "292",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/vulnerablelibraries/index.html",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "171",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "public, max-age=600",
        "pluginId": "10015",
        "cweid": "525",
        "confidence": "Low",
        "wascid": "13",
        "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
        "messageId": "292",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/vulnerablelibraries/index.html",
        "tags": {
          "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/",
        "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
        "alert": "Re-examine Cache-control Directives",
        "param": "Cache-Control",
        "attack": "",
        "name": "Re-examine Cache-control Directives",
        "risk": "Informational",
        "id": "177",
        "alertRef": "10015"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "292",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/vulnerablelibraries/index.html",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "178",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "300",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reverseclickjacking/",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "181",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "The presence of the 'Age' header indicates that that a HTTP/1.1 compliant caching server is in use.",
        "method": "GET",
        "evidence": "Age: 0",
        "pluginId": "10050",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as \"proxy\" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ",
        "messageId": "292",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/vulnerablelibraries/index.html",
        "tags": {
          "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttp://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html (obsoleted by rfc7234)",
        "solution": "Validate that the response does not contain sensitive, personal or user-specific information.  If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.",
        "alert": "Retrieved from Cache",
        "param": "",
        "attack": "",
        "name": "Retrieved from Cache",
        "risk": "Informational",
        "id": "182",
        "alertRef": "10050"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "292",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/vulnerablelibraries/index.html",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "183",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "292",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/vulnerablelibraries/index.html",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "184",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "public, max-age=600",
        "pluginId": "10015",
        "cweid": "525",
        "confidence": "Low",
        "wascid": "13",
        "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
        "messageId": "300",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reverseclickjacking/",
        "tags": {
          "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/",
        "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
        "alert": "Re-examine Cache-control Directives",
        "param": "Cache-Control",
        "attack": "",
        "name": "Re-examine Cache-control Directives",
        "risk": "Informational",
        "id": "185",
        "alertRef": "10015"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "300",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reverseclickjacking/",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "187",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "The presence of the 'Age' header indicates that that a HTTP/1.1 compliant caching server is in use.",
        "method": "GET",
        "evidence": "Age: 0",
        "pluginId": "10050",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as \"proxy\" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ",
        "messageId": "300",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reverseclickjacking/",
        "tags": {
          "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttp://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html (obsoleted by rfc7234)",
        "solution": "Validate that the response does not contain sensitive, personal or user-specific information.  If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.",
        "alert": "Retrieved from Cache",
        "param": "",
        "attack": "",
        "name": "Retrieved from Cache",
        "risk": "Informational",
        "id": "189",
        "alertRef": "10050"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "300",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reverseclickjacking/",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "191",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "300",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reverseclickjacking/",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "193",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "605",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/invalidframingconfig/index.html",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "222",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "614",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_body/1.2.18?q=test",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "225",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "public, max-age=600",
        "pluginId": "10015",
        "cweid": "525",
        "confidence": "Low",
        "wascid": "13",
        "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
        "messageId": "605",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/invalidframingconfig/index.html",
        "tags": {
          "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/",
        "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
        "alert": "Re-examine Cache-control Directives",
        "param": "Cache-Control",
        "attack": "",
        "name": "Re-examine Cache-control Directives",
        "risk": "Informational",
        "id": "226",
        "alertRef": "10015"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "605",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/invalidframingconfig/index.html",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "227",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "The presence of the 'Age' header indicates that that a HTTP/1.1 compliant caching server is in use.",
        "method": "GET",
        "evidence": "Age: 0",
        "pluginId": "10050",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as \"proxy\" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ",
        "messageId": "605",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/invalidframingconfig/index.html",
        "tags": {
          "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttp://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html (obsoleted by rfc7234)",
        "solution": "Validate that the response does not contain sensitive, personal or user-specific information.  If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.",
        "alert": "Retrieved from Cache",
        "param": "",
        "attack": "",
        "name": "Retrieved from Cache",
        "risk": "Informational",
        "id": "230",
        "alertRef": "10050"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "605",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/invalidframingconfig/index.html",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "231",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "614",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_body/1.2.18?q=test",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "232",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"//ajax.googleapis.com/ajax/libs/angularjs/1.2.18/angular.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "614",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_body/1.2.18?q=test",
        "tags": {
          "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "//ajax.googleapis.com/ajax/libs/angularjs/1.2.18/angular.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "233",
        "alertRef": "10017"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "605",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/invalidframingconfig/index.html",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "234",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script src=\"//ajax.googleapis.com/ajax/libs/angularjs/1.2.18/angular.js\"></script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "614",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_body/1.2.18?q=test",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "238",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "614",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_body/1.2.18?q=test",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "240",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "614",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_body/1.2.18?q=test",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "242",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "616",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/location.hash/innerHtml",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "246",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "622",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/location.hash/eval",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "247",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "616",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/location.hash/innerHtml",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "248",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "622",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/location.hash/eval",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "249",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script>\n      var payload = window.location.hash.substr(1);eval(payload); \n\n    </script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "622",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/location.hash/eval",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "251",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "624",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/remoteinclude/parameter/script?q=http://127.0.0.2/localhost_import.js",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "252",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "622",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/location.hash/eval",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "253",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script>\n      var payload = window.location.hash.substr(1);var div = document.createElement('div');\ndiv.id = 'divEl';\ndocument.documentElement.appendChild(div);\n\nvar divEl = document.getElementById('divEl');\ndivEl.innerHTML = payload;\n\n    </script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "616",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/location.hash/innerHtml",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "254",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "616",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/location.hash/innerHtml",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "255",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "622",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/location.hash/eval",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "256",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "616",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/location.hash/innerHtml",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "258",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "624",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/remoteinclude/parameter/script?q=http://127.0.0.2/localhost_import.js",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "260",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"http://127.0.0.2/localhost_import.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "624",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/remoteinclude/parameter/script?q=http://127.0.0.2/localhost_import.js",
        "tags": {
          "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "http://127.0.0.2/localhost_import.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "262",
        "alertRef": "10017"
      },
      {
        "sourceid": "3",
        "other": "tag=script src=http://127.0.0.2/localhost_import.js\n",
        "method": "GET",
        "evidence": "http://127.0.0.2/localhost_import.js",
        "pluginId": "10040",
        "cweid": "311",
        "confidence": "Medium",
        "wascid": "4",
        "description": "The page includes mixed content, that is content accessed via HTTP instead of HTTPS.",
        "messageId": "624",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/remoteinclude/parameter/script?q=http://127.0.0.2/localhost_import.js",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html",
          "WSTG-v42-CRYP-03": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/03-Testing_for_Sensitive_Information_Sent_via_Unencrypted_Channels"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Protection_Cheat_Sheet.html",
        "solution": "A page that is available over SSL/TLS must be comprised completely of content which is transmitted over SSL/TLS.\nThe page must not contain any content that is transmitted over unencrypted HTTP.\n This includes content from third party sites.",
        "alert": "Secure Pages Include Mixed Content (Including Scripts)",
        "param": "",
        "attack": "",
        "name": "Secure Pages Include Mixed Content (Including Scripts)",
        "risk": "Medium",
        "id": "264",
        "alertRef": "10040"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script src=\"http://127.0.0.2/localhost_import.js\"></script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "624",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/remoteinclude/parameter/script?q=http://127.0.0.2/localhost_import.js",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "265",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "629",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_body/1.1.5?q=test",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "266",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "624",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/remoteinclude/parameter/script?q=http://127.0.0.2/localhost_import.js",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "267",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "631",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/location.hash/documentwrite",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "268",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:\r\n\r\nhttps://public-firing-range.appspot.com/remoteinclude/parameter/script?q=http://127.0.0.2/localhost_import.js\r\n\r\nappears to include user input in: \r\n\r\na(n) [script] tag [src] attribute \r\n\r\nThe user input found was:\r\nq=http://127.0.0.2/localhost_import.js\r\n\r\nThe user-controlled value was:\r\nhttp://127.0.0.2/localhost_import.js",
        "method": "GET",
        "evidence": "",
        "pluginId": "10031",
        "cweid": "20",
        "confidence": "Low",
        "wascid": "20",
        "description": "This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.",
        "messageId": "624",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/remoteinclude/parameter/script?q=http://127.0.0.2/localhost_import.js",
        "tags": {
          "OWASP_2021_A03": "https://owasp.org/Top10/A03_2021-Injection/",
          "OWASP_2017_A01": "https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html"
        },
        "reference": "http://websecuritytool.codeplex.com/wikipage?title=Checks#user-controlled-html-attribute",
        "solution": "Validate all input and sanitize output it before writing to any HTML attributes.",
        "alert": "User Controllable HTML Element Attribute (Potential XSS)",
        "param": "q",
        "attack": "",
        "name": "User Controllable HTML Element Attribute (Potential XSS)",
        "risk": "Informational",
        "id": "269",
        "alertRef": "10031"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "624",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/remoteinclude/parameter/script?q=http://127.0.0.2/localhost_import.js",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "270",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "629",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_body/1.1.5?q=test",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "271",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "631",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/location.hash/documentwrite",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "272",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "633",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_body/1.2.0?q=test",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "273",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"//ajax.googleapis.com/ajax/libs/angularjs/1.1.5/angular.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "629",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_body/1.1.5?q=test",
        "tags": {
          "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "//ajax.googleapis.com/ajax/libs/angularjs/1.1.5/angular.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "274",
        "alertRef": "10017"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script>\n      var payload = window.location.hash.substr(1);document.write(payload);\n\n    </script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "631",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/location.hash/documentwrite",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "275",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "631",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/location.hash/documentwrite",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "276",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script src=\"//ajax.googleapis.com/ajax/libs/angularjs/1.1.5/angular.js\"></script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "629",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_body/1.1.5?q=test",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "277",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "629",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_body/1.1.5?q=test",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "278",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "631",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/location.hash/documentwrite",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "279",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "633",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_body/1.2.0?q=test",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "280",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"//ajax.googleapis.com/ajax/libs/angularjs/1.2.0/angular.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "633",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_body/1.2.0?q=test",
        "tags": {
          "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "//ajax.googleapis.com/ajax/libs/angularjs/1.2.0/angular.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "281",
        "alertRef": "10017"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "629",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_body/1.1.5?q=test",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "282",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "634",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/location.hash/assign",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "283",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script src=\"//ajax.googleapis.com/ajax/libs/angularjs/1.2.0/angular.js\"></script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "633",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_body/1.2.0?q=test",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "284",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "633",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_body/1.2.0?q=test",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "285",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "633",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_body/1.2.0?q=test",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "286",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "634",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/location.hash/assign",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "287",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script>\n      var payload = window.location.hash.substr(1);window.location.assign(payload);\n\n    </script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "634",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/location.hash/assign",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "288",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "636",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/remoteinclude/parameter/script?q=http://192.168.1.2/private_network_import.js",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "289",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "634",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/location.hash/assign",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "290",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "634",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/location.hash/assign",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "292",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "636",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/remoteinclude/parameter/script?q=http://192.168.1.2/private_network_import.js",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "293",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"http://192.168.1.2/private_network_import.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "636",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/remoteinclude/parameter/script?q=http://192.168.1.2/private_network_import.js",
        "tags": {
          "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "http://192.168.1.2/private_network_import.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "296",
        "alertRef": "10017"
      },
      {
        "sourceid": "3",
        "other": "192.168.1.2\n",
        "method": "GET",
        "evidence": "192.168.1.2",
        "pluginId": "2",
        "cweid": "200",
        "confidence": "Medium",
        "wascid": "13",
        "description": "A private IP (such as 10.x.x.x, 172.x.x.x, 192.168.x.x) or an Amazon EC2 private hostname (for example, ip-10-0-56-78) has been found in the HTTP response body. This information might be helpful for further attacks targeting internal systems.",
        "messageId": "636",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/remoteinclude/parameter/script?q=http://192.168.1.2/private_network_import.js",
        "tags": {
          "OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
          "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html"
        },
        "reference": "https://tools.ietf.org/html/rfc1918",
        "solution": "Remove the private IP address from the HTTP response body.  For comments, use JSP/ASP/PHP comment instead of HTML/JavaScript comment which can be seen by client browsers.",
        "alert": "Private IP Disclosure",
        "param": "",
        "attack": "",
        "name": "Private IP Disclosure",
        "risk": "Low",
        "id": "298",
        "alertRef": "2"
      },
      {
        "sourceid": "3",
        "other": "tag=script src=http://192.168.1.2/private_network_import.js\n",
        "method": "GET",
        "evidence": "http://192.168.1.2/private_network_import.js",
        "pluginId": "10040",
        "cweid": "311",
        "confidence": "Medium",
        "wascid": "4",
        "description": "The page includes mixed content, that is content accessed via HTTP instead of HTTPS.",
        "messageId": "636",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/remoteinclude/parameter/script?q=http://192.168.1.2/private_network_import.js",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html",
          "WSTG-v42-CRYP-03": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/03-Testing_for_Sensitive_Information_Sent_via_Unencrypted_Channels"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Protection_Cheat_Sheet.html",
        "solution": "A page that is available over SSL/TLS must be comprised completely of content which is transmitted over SSL/TLS.\nThe page must not contain any content that is transmitted over unencrypted HTTP.\n This includes content from third party sites.",
        "alert": "Secure Pages Include Mixed Content (Including Scripts)",
        "param": "",
        "attack": "",
        "name": "Secure Pages Include Mixed Content (Including Scripts)",
        "risk": "Medium",
        "id": "301",
        "alertRef": "10040"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script src=\"http://192.168.1.2/private_network_import.js\"></script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "636",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/remoteinclude/parameter/script?q=http://192.168.1.2/private_network_import.js",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "303",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "636",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/remoteinclude/parameter/script?q=http://192.168.1.2/private_network_import.js",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "305",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "656",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/location.hash/replace",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "307",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:\r\n\r\nhttps://public-firing-range.appspot.com/remoteinclude/parameter/script?q=http://192.168.1.2/private_network_import.js\r\n\r\nappears to include user input in: \r\n\r\na(n) [script] tag [src] attribute \r\n\r\nThe user input found was:\r\nq=http://192.168.1.2/private_network_import.js\r\n\r\nThe user-controlled value was:\r\nhttp://192.168.1.2/private_network_import.js",
        "method": "GET",
        "evidence": "",
        "pluginId": "10031",
        "cweid": "20",
        "confidence": "Low",
        "wascid": "20",
        "description": "This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.",
        "messageId": "636",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/remoteinclude/parameter/script?q=http://192.168.1.2/private_network_import.js",
        "tags": {
          "OWASP_2021_A03": "https://owasp.org/Top10/A03_2021-Injection/",
          "OWASP_2017_A01": "https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html"
        },
        "reference": "http://websecuritytool.codeplex.com/wikipage?title=Checks#user-controlled-html-attribute",
        "solution": "Validate all input and sanitize output it before writing to any HTML attributes.",
        "alert": "User Controllable HTML Element Attribute (Potential XSS)",
        "param": "q",
        "attack": "",
        "name": "User Controllable HTML Element Attribute (Potential XSS)",
        "risk": "Informational",
        "id": "309",
        "alertRef": "10031"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "636",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/remoteinclude/parameter/script?q=http://192.168.1.2/private_network_import.js",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "312",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "656",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/location.hash/replace",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "313",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script>\n      var payload = window.location.hash.substr(1);location.replace(payload); \n\n    </script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "656",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/location.hash/replace",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "315",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "656",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/location.hash/replace",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "316",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "656",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/location.hash/replace",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "317",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "657",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/location.hash/documentwriteln",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "318",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "669",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/location.hash/function",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "320",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "657",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/location.hash/documentwriteln",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "321",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script>\n      var payload = window.location.hash.substr(1);document.writeln(payload);\n\n    </script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "657",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/location.hash/documentwriteln",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "323",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "669",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/location.hash/function",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "324",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "657",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/location.hash/documentwriteln",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "326",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script>\n      var payload = window.location.hash.substr(1);var f = new Function(payload);\nf();\n    </script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "669",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/location.hash/function",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "328",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "685",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/remoteinclude/parameter/script?q=http://g00gle.com/typosquatting_domain.js",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "329",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "657",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/location.hash/documentwriteln",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "330",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "669",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/location.hash/function",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "332",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "669",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/location.hash/function",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "333",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "685",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/remoteinclude/parameter/script?q=http://g00gle.com/typosquatting_domain.js",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "334",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"http://g00gle.com/typosquatting_domain.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "685",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/remoteinclude/parameter/script?q=http://g00gle.com/typosquatting_domain.js",
        "tags": {
          "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "http://g00gle.com/typosquatting_domain.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "335",
        "alertRef": "10017"
      },
      {
        "sourceid": "3",
        "other": "tag=script src=http://g00gle.com/typosquatting_domain.js\n",
        "method": "GET",
        "evidence": "http://g00gle.com/typosquatting_domain.js",
        "pluginId": "10040",
        "cweid": "311",
        "confidence": "Medium",
        "wascid": "4",
        "description": "The page includes mixed content, that is content accessed via HTTP instead of HTTPS.",
        "messageId": "685",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/remoteinclude/parameter/script?q=http://g00gle.com/typosquatting_domain.js",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html",
          "WSTG-v42-CRYP-03": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/03-Testing_for_Sensitive_Information_Sent_via_Unencrypted_Channels"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Protection_Cheat_Sheet.html",
        "solution": "A page that is available over SSL/TLS must be comprised completely of content which is transmitted over SSL/TLS.\nThe page must not contain any content that is transmitted over unencrypted HTTP.\n This includes content from third party sites.",
        "alert": "Secure Pages Include Mixed Content (Including Scripts)",
        "param": "",
        "attack": "",
        "name": "Secure Pages Include Mixed Content (Including Scripts)",
        "risk": "Medium",
        "id": "336",
        "alertRef": "10040"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script src=\"http://g00gle.com/typosquatting_domain.js\"></script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "685",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/remoteinclude/parameter/script?q=http://g00gle.com/typosquatting_domain.js",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "337",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "685",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/remoteinclude/parameter/script?q=http://g00gle.com/typosquatting_domain.js",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "338",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:\r\n\r\nhttps://public-firing-range.appspot.com/remoteinclude/parameter/script?q=http://g00gle.com/typosquatting_domain.js\r\n\r\nappears to include user input in: \r\n\r\na(n) [script] tag [src] attribute \r\n\r\nThe user input found was:\r\nq=http://g00gle.com/typosquatting_domain.js\r\n\r\nThe user-controlled value was:\r\nhttp://g00gle.com/typosquatting_domain.js",
        "method": "GET",
        "evidence": "",
        "pluginId": "10031",
        "cweid": "20",
        "confidence": "Low",
        "wascid": "20",
        "description": "This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.",
        "messageId": "685",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/remoteinclude/parameter/script?q=http://g00gle.com/typosquatting_domain.js",
        "tags": {
          "OWASP_2021_A03": "https://owasp.org/Top10/A03_2021-Injection/",
          "OWASP_2017_A01": "https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html"
        },
        "reference": "http://websecuritytool.codeplex.com/wikipage?title=Checks#user-controlled-html-attribute",
        "solution": "Validate all input and sanitize output it before writing to any HTML attributes.",
        "alert": "User Controllable HTML Element Attribute (Potential XSS)",
        "param": "q",
        "attack": "",
        "name": "User Controllable HTML Element Attribute (Potential XSS)",
        "risk": "Informational",
        "id": "339",
        "alertRef": "10031"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "685",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/remoteinclude/parameter/script?q=http://g00gle.com/typosquatting_domain.js",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "340",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "691",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/location.hash/setTimeout",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "343",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "691",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/location.hash/setTimeout",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "346",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script>\n      var payload = window.location.hash.substr(1);setTimeout('var a=a;' + payload, 1); \n\n    </script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "691",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/location.hash/setTimeout",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "348",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "691",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/location.hash/setTimeout",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "351",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "691",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/location.hash/setTimeout",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "354",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "696",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_body/1.2.24?q=test",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "367",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "696",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_body/1.2.24?q=test",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "371",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"//ajax.googleapis.com/ajax/libs/angularjs/1.2.24/angular.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "696",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_body/1.2.24?q=test",
        "tags": {
          "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "//ajax.googleapis.com/ajax/libs/angularjs/1.2.24/angular.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "372",
        "alertRef": "10017"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script src=\"//ajax.googleapis.com/ajax/libs/angularjs/1.2.24/angular.js\"></script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "696",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_body/1.2.24?q=test",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "373",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "696",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_body/1.2.24?q=test",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "375",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "696",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_body/1.2.24?q=test",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "379",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "920",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/location.hash/rangeCreateContextualFragment",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "458",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "934",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_body/1.2.19?q=test",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "463",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "920",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/location.hash/rangeCreateContextualFragment",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "464",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "934",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_body/1.2.19?q=test",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "469",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script>\n      var payload = window.location.hash.substr(1);var div = document.createElement('div');\ndiv.id = 'divEl';\ndocument.documentElement.appendChild(div);\n\nvar range = document.createRange();\n// make the parent of the first div in the document becomes the context node\nrange.selectNode(document.getElementsByTagName(\"div\").item(0));\nvar documentFragment = range.createContextualFragment(payload);\ndocument.body.appendChild(documentFragment);\n\n    </script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "920",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/location.hash/rangeCreateContextualFragment",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "470",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "920",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/location.hash/rangeCreateContextualFragment",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "472",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"//ajax.googleapis.com/ajax/libs/angularjs/1.2.19/angular.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "934",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_body/1.2.19?q=test",
        "tags": {
          "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "//ajax.googleapis.com/ajax/libs/angularjs/1.2.19/angular.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "474",
        "alertRef": "10017"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "920",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/location.hash/rangeCreateContextualFragment",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "475",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script src=\"//ajax.googleapis.com/ajax/libs/angularjs/1.2.19/angular.js\"></script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "934",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_body/1.2.19?q=test",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "476",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "934",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_body/1.2.19?q=test",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "477",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "934",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_body/1.2.19?q=test",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "478",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "988",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/location.hash/jshref",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "480",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "989",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/location.hash/onclickSetAttribute",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "481",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "989",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/location.hash/onclickSetAttribute",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "484",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "988",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/location.hash/jshref",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "487",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script>\n      var payload = window.location.hash.substr(1);var div = document.createElement('div');\ndiv.setAttribute('onclick', payload);\ndocument.documentElement.appendChild(div);\n    </script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "989",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/location.hash/onclickSetAttribute",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "488",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "989",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/location.hash/onclickSetAttribute",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "489",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "989",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/location.hash/onclickSetAttribute",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "490",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script>\n      var payload = window.location.hash.substr(1);var a = document.createElement('a');\na.setAttribute('href', payload);\ndocument.documentElement.appendChild(a);\n\n    </script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "988",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/location.hash/jshref",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "492",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "988",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/location.hash/jshref",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "495",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "988",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/location.hash/jshref",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "497",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "990",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/location/assign",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "499",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "990",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/location/assign",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "502",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script>\n      var payload = window.location;\nwindow.location.assign(payload);\n\n    </script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "990",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/location/assign",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "506",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "994",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/location.hash/onclickAddEventListener",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "507",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "990",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/location/assign",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "508",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "990",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/location/assign",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "509",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "994",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/location.hash/onclickAddEventListener",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "515",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "995",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/location.hash/formaction",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "517",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script>\n      var payload = window.location.hash.substr(1);var div = document.createElement('div');\ndiv.addEventListener('click', new Function(payload), false);\ndocument.documentElement.appendChild(div);\n    </script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "994",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/location.hash/onclickAddEventListener",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "518",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "994",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/location.hash/onclickAddEventListener",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "519",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "994",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/location.hash/onclickAddEventListener",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "520",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "995",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/location.hash/formaction",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "521",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script>\n      var payload = window.location.hash.substr(1);var form = document.createElement('form');\nform.setAttribute('action', payload);\nform.innerHTML = '<input type=\\'submit\\'></input>';\ndocument.documentElement.appendChild(form);\n\n    </script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "995",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/location.hash/formaction",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "522",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "995",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/location.hash/formaction",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "523",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "995",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/location.hash/formaction",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "524",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "996",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/cors/alloworigin/allowInsecureScheme",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "525",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "998",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/location/replace",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "526",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "996",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/cors/alloworigin/allowInsecureScheme",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "527",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10015",
        "cweid": "525",
        "confidence": "Low",
        "wascid": "13",
        "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
        "messageId": "999",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/flashinjection/callbackIsEchoedBack?callback=func",
        "tags": {
          "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/",
        "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
        "alert": "Re-examine Cache-control Directives",
        "param": "Cache-Control",
        "attack": "",
        "name": "Re-examine Cache-control Directives",
        "risk": "Informational",
        "id": "528",
        "alertRef": "10015"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1000",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/document/cookie_set/eval",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "529",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script>\nvar xhr = new XMLHttpRequest();\nxhr.open('POST', 'https://public-firing-range.appspot.com/cors/alloworigin/allowInsecureScheme', true);\nxhr.send();\n</script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "996",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/cors/alloworigin/allowInsecureScheme",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "530",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "999",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/flashinjection/callbackIsEchoedBack?callback=func",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "531",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "996",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/cors/alloworigin/allowInsecureScheme",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "532",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "998",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/location/replace",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "533",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "999",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/flashinjection/callbackIsEchoedBack?callback=func",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "534",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "996",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/cors/alloworigin/allowInsecureScheme",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "535",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1000",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/document/cookie_set/eval",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "536",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script>\n      var payload = window.location;\nlocation.replace(payload); \n\n    </script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "998",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/location/replace",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "537",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script>\n      /*\n * Return the value of the first cookie with the given name.\n */\nfunction lookupCookie(name) {\n  var parts = document.cookie.split(/\\s*;\\s*/);\n  var nameEq = name + '=';\n  for (var i = 0; i < parts.length; i++) {\n    if (parts[i].indexOf(nameEq) == 0) {\n      return parts[i].substr(nameEq.length);\n    }\n  }\n}\n\n// Pre-seed the cookie, if it has not been set yet.\nif (!lookupCookie('badValue')) {\n  document.cookie = 'badValue=\"a\"';\n}\n\nvar payload = lookupCookie('badValue');\n\nsetTimeout(function() {\n  trigger(lookupCookie('badValue'));\n}, 10);\n// Sync trigger.\neval(payload);\n\n// Async trigger.\nfunction trigger(payload) {\n  eval(payload);\n};\n    </script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1000",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/document/cookie_set/eval",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "538",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1000",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/document/cookie_set/eval",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "539",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1000",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/document/cookie_set/eval",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "540",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "998",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/location/replace",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "542",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "998",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/location/replace",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "543",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1005",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/document/cookie_set/documentWrite",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "547",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1007",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/cors/alloworigin/dynamicAllowOrigin",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "548",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1005",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/document/cookie_set/documentWrite",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "557",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1007",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/cors/alloworigin/dynamicAllowOrigin",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "559",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script>\nvar xhr = new XMLHttpRequest();\nxhr.open('POST', 'https://public-firing-range.appspot.com/cors/alloworigin/dynamicAllowOrigin', true);\nxhr.send();\n</script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1007",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/cors/alloworigin/dynamicAllowOrigin",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "561",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1007",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/cors/alloworigin/dynamicAllowOrigin",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "562",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script>\n      /*\n * Return the value of the first cookie with the given name.\n */\nfunction lookupCookie(name) {\n  var parts = document.cookie.split(/\\s*;\\s*/);\n  var nameEq = name + '=';\n  for (var i = 0; i < parts.length; i++) {\n    if (parts[i].indexOf(nameEq) == 0) {\n      return parts[i].substr(nameEq.length);\n    }\n  }\n}\n\n// Pre-seed the cookie, if it has not been set yet.\nif (!lookupCookie('badValue')) {\n  document.cookie = 'badValue=\"a\"';\n}\n\nvar payload = lookupCookie('badValue');\n\nsetTimeout(function() {\n  trigger(lookupCookie('badValue'));\n}, 10);\n// Sync trigger.\ndocument.write(payload);\n\n// Async trigger.\nfunction trigger(payload) {\n  document.write(payload);\n}\n    </script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1005",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/document/cookie_set/documentWrite",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "563",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1007",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/cors/alloworigin/dynamicAllowOrigin",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "564",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1005",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/document/cookie_set/documentWrite",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "565",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10015",
        "cweid": "525",
        "confidence": "Low",
        "wascid": "13",
        "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
        "messageId": "1008",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/flashinjection/callbackParameterDoesNothing?callback=func",
        "tags": {
          "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/",
        "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
        "alert": "Re-examine Cache-control Directives",
        "param": "Cache-Control",
        "attack": "",
        "name": "Re-examine Cache-control Directives",
        "risk": "Informational",
        "id": "566",
        "alertRef": "10015"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1005",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/document/cookie_set/documentWrite",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "567",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1008",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/flashinjection/callbackParameterDoesNothing?callback=func",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "568",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1008",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/flashinjection/callbackParameterDoesNothing?callback=func",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "570",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1010",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/remoteinclude/parameter/script?q=https://google.com",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "571",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1010",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/remoteinclude/parameter/script?q=https://google.com",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "577",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://google.com\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "1010",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/remoteinclude/parameter/script?q=https://google.com",
        "tags": {
          "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://google.com",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "578",
        "alertRef": "10017"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script src=\"https://google.com\"></script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1010",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/remoteinclude/parameter/script?q=https://google.com",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "581",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1010",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/remoteinclude/parameter/script?q=https://google.com",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "583",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:\r\n\r\nhttps://public-firing-range.appspot.com/remoteinclude/parameter/script?q=https://google.com\r\n\r\nappears to include user input in: \r\n\r\na(n) [script] tag [src] attribute \r\n\r\nThe user input found was:\r\nq=https://google.com\r\n\r\nThe user-controlled value was:\r\nhttps://google.com",
        "method": "GET",
        "evidence": "",
        "pluginId": "10031",
        "cweid": "20",
        "confidence": "Low",
        "wascid": "20",
        "description": "This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.",
        "messageId": "1010",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/remoteinclude/parameter/script?q=https://google.com",
        "tags": {
          "OWASP_2021_A03": "https://owasp.org/Top10/A03_2021-Injection/",
          "OWASP_2017_A01": "https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html"
        },
        "reference": "http://websecuritytool.codeplex.com/wikipage?title=Checks#user-controlled-html-attribute",
        "solution": "Validate all input and sanitize output it before writing to any HTML attributes.",
        "alert": "User Controllable HTML Element Attribute (Potential XSS)",
        "param": "q",
        "attack": "",
        "name": "User Controllable HTML Element Attribute (Potential XSS)",
        "risk": "Informational",
        "id": "586",
        "alertRef": "10031"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1016",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/location.hash/inlineevent",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "588",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1010",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/remoteinclude/parameter/script?q=https://google.com",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "590",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1016",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/location.hash/inlineevent",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "594",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script>\n      var payload = window.location.hash.substr(1);var div = document.createElement('div');\ndiv.innerHTML = '<div onclick=\\'' + payload.replace(/'/g, '\"') + '\\'>div</div>';\ndocument.documentElement.appendChild(div);\n\n    </script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1016",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/location.hash/inlineevent",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "598",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1016",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/location.hash/inlineevent",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "600",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1016",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/location.hash/inlineevent",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "604",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1019",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_body_raw/1.4.0?q=test",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "612",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1021",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/location/innerHtml",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "613",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1019",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_body_raw/1.4.0?q=test",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "616",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1022",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_body/1.4.0?q=test",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "618",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"//ajax.googleapis.com/ajax/libs/angularjs/1.4.0/angular.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "1019",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_body_raw/1.4.0?q=test",
        "tags": {
          "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "//ajax.googleapis.com/ajax/libs/angularjs/1.4.0/angular.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "619",
        "alertRef": "10017"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1021",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/location/innerHtml",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "620",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script src=\"//ajax.googleapis.com/ajax/libs/angularjs/1.4.0/angular.js\"></script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1019",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_body_raw/1.4.0?q=test",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "621",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script>\n      var payload = window.location;\nvar div = document.createElement('div');\ndiv.id = 'divEl';\ndocument.documentElement.appendChild(div);\n\nvar divEl = document.getElementById('divEl');\ndivEl.innerHTML = payload;\n\n    </script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1021",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/location/innerHtml",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "622",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1022",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_body/1.4.0?q=test",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "623",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1021",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/location/innerHtml",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "624",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"//ajax.googleapis.com/ajax/libs/angularjs/1.4.0/angular.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "1022",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_body/1.4.0?q=test",
        "tags": {
          "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "//ajax.googleapis.com/ajax/libs/angularjs/1.4.0/angular.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "625",
        "alertRef": "10017"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1019",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_body_raw/1.4.0?q=test",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "626",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1021",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/location/innerHtml",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "627",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1019",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_body_raw/1.4.0?q=test",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "628",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script src=\"//ajax.googleapis.com/ajax/libs/angularjs/1.4.0/angular.js\"></script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1022",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_body/1.4.0?q=test",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "629",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1023",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/document/cookie_set/innerHtml",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "630",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1022",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_body/1.4.0?q=test",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "631",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1023",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/document/cookie_set/innerHtml",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "632",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1022",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_body/1.4.0?q=test",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "633",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1024",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_body_alt_symbols/1.4.0?q=test",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "634",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script>\n      /*\n * Return the value of the first cookie with the given name.\n */\nfunction lookupCookie(name) {\n  var parts = document.cookie.split(/\\s*;\\s*/);\n  var nameEq = name + '=';\n  for (var i = 0; i < parts.length; i++) {\n    if (parts[i].indexOf(nameEq) == 0) {\n      return parts[i].substr(nameEq.length);\n    }\n  }\n}\n\n// Pre-seed the cookie, if it has not been set yet.\nif (!lookupCookie('badValue')) {\n  document.cookie = 'badValue=\"a\"';\n}\n\nvar payload = lookupCookie('badValue');\n\nsetTimeout(function() {\n  trigger(lookupCookie('badValue'));\n}, 10);\nvar div = document.createElement('div');\ndocument.documentElement.appendChild(div);\n\n// Sync trigger.\ndiv.innerHTML = payload;\n\n// Async trigger.\nfunction trigger(payload) {\n  div.innerHTML = payload;\n};\n\n    </script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1023",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/document/cookie_set/innerHtml",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "635",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1026",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/cors/alloworigin/allowNullOrigin",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "636",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1024",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_body_alt_symbols/1.4.0?q=test",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "637",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1023",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/document/cookie_set/innerHtml",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "638",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"//ajax.googleapis.com/ajax/libs/angularjs/1.4.0/angular.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "1024",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_body_alt_symbols/1.4.0?q=test",
        "tags": {
          "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "//ajax.googleapis.com/ajax/libs/angularjs/1.4.0/angular.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "639",
        "alertRef": "10017"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1023",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/document/cookie_set/innerHtml",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "640",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1026",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/cors/alloworigin/allowNullOrigin",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "641",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script src=\"//ajax.googleapis.com/ajax/libs/angularjs/1.4.0/angular.js\"></script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1024",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_body_alt_symbols/1.4.0?q=test",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "642",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script>\nvar xhr = new XMLHttpRequest();\nxhr.open('POST', 'https://public-firing-range.appspot.com/cors/alloworigin/allowNullOrigin', true);\nxhr.send();\n</script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1026",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/cors/alloworigin/allowNullOrigin",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "643",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1024",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_body_alt_symbols/1.4.0?q=test",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "644",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1026",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/cors/alloworigin/allowNullOrigin",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "645",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1024",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_body_alt_symbols/1.4.0?q=test",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "646",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1026",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/cors/alloworigin/allowNullOrigin",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "647",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1028",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/jsonp?callback=foo",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "650",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1028",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/jsonp?callback=foo",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "651",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1032",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/leakedcookie/leakedcookie",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "666",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1032",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/leakedcookie/leakedcookie",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "671",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "Set-Cookie: my_secret_cookie",
        "pluginId": "10054",
        "cweid": "1275",
        "confidence": "Medium",
        "wascid": "13",
        "description": "A cookie has been set without the SameSite attribute, which means that the cookie can be sent as a result of a 'cross-site' request. The SameSite attribute is an effective counter measure to cross-site request forgery, cross-site script inclusion, and timing attacks.",
        "messageId": "1032",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/leakedcookie/leakedcookie",
        "tags": {
          "OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
          "WSTG-v42-SESS-02": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes",
          "OWASP_2017_A05": "https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html"
        },
        "reference": "https://tools.ietf.org/html/draft-ietf-httpbis-cookie-same-site",
        "solution": "Ensure that the SameSite attribute is set to either 'lax' or ideally 'strict' for all cookies.",
        "alert": "Cookie without SameSite Attribute",
        "param": "my_secret_cookie",
        "attack": "",
        "name": "Cookie without SameSite Attribute",
        "risk": "Low",
        "id": "675",
        "alertRef": "10054"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "Set-Cookie: my_secret_cookie",
        "pluginId": "10011",
        "cweid": "614",
        "confidence": "Medium",
        "wascid": "13",
        "description": "A cookie has been set without the secure flag, which means that the cookie can be accessed via unencrypted connections.",
        "messageId": "1032",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/leakedcookie/leakedcookie",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-SESS-02": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes.html",
        "solution": "Whenever a cookie contains sensitive information or is a session token, then it should always be passed using an encrypted channel. Ensure that the secure flag is set for cookies containing such sensitive information.",
        "alert": "Cookie Without Secure Flag",
        "param": "my_secret_cookie",
        "attack": "",
        "name": "Cookie Without Secure Flag",
        "risk": "Low",
        "id": "676",
        "alertRef": "10011"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1032",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/leakedcookie/leakedcookie",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "680",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1032",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/leakedcookie/leakedcookie",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "683",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1035",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/location/eval",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "684",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1035",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/location/eval",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "688",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script>\n      var payload = window.location;\neval(payload); \n\n    </script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1035",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/location/eval",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "689",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1035",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/location/eval",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "690",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1036",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/location/documentwrite",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "691",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1035",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/location/eval",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "692",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1037",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/location/setTimeout",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "693",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1038",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/documentURI/documentwrite",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "694",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1036",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/location/documentwrite",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "695",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1037",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/location/setTimeout",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "696",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script>\n      var payload = window.location;\ndocument.write(payload);\n\n    </script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1036",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/location/documentwrite",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "697",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1036",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/location/documentwrite",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "699",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script>\n      var payload = window.location;\nsetTimeout('var a=a;' + payload, 1); \n\n    </script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1037",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/location/setTimeout",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "700",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1036",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/location/documentwrite",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "701",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1037",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/location/setTimeout",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "702",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1038",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/documentURI/documentwrite",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "703",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1037",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/location/setTimeout",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "705",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script>\n      var payload = document.documentURI;\ndocument.write(payload);\n\n    </script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1038",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/documentURI/documentwrite",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "706",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1038",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/documentURI/documentwrite",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "708",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1038",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/documentURI/documentwrite",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "710",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1041",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/document/cookie/eval",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "711",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1041",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/document/cookie/eval",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "714",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1043",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/baseURI/documentwrite",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "715",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script>\n      /*\n * Return the value of the first cookie with the given name.\n */\nvar lookupCookie = function(name) {\n  var parts = document.cookie.split(/\\s*;\\s*/);\n  var nameEq = name + '=';\n  for (var i = 0; i < parts.length; i++) {\n    if (parts[i].indexOf(nameEq) == 0) {\n      return parts[i].substr(nameEq.length);\n    }\n  }\n};\nvar payload = lookupCookie('ThisCookieIsTotallyRandomAndCantPossiblyBeSet');\n// Sync trigger.\neval(payload);\n\n// Async trigger.\nfunction trigger(payload) {\n  eval(payload);\n};\n    </script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1041",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/document/cookie/eval",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "717",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1041",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/document/cookie/eval",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "718",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1046",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/locationhref/documentwrite",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "719",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1041",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/document/cookie/eval",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "720",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1043",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/baseURI/documentwrite",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "722",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1046",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/locationhref/documentwrite",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "725",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script>\n      var payload = document.baseURI;\ndocument.write(payload);\n\n    </script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1043",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/baseURI/documentwrite",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "727",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script>\n      var payload = window.location.href;\ndocument.write(payload);\n\n    </script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1046",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/locationhref/documentwrite",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "728",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1043",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/baseURI/documentwrite",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "729",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1043",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/baseURI/documentwrite",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "730",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1046",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/locationhref/documentwrite",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "731",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1046",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/locationhref/documentwrite",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "732",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1049",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_body_raw_post/1.6.0",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "735",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1053",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/remoteinclude/script_hash.html",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "739",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "public, max-age=600",
        "pluginId": "10015",
        "cweid": "525",
        "confidence": "Low",
        "wascid": "13",
        "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
        "messageId": "1053",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/remoteinclude/script_hash.html",
        "tags": {
          "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/",
        "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
        "alert": "Re-examine Cache-control Directives",
        "param": "Cache-Control",
        "attack": "",
        "name": "Re-examine Cache-control Directives",
        "risk": "Informational",
        "id": "741",
        "alertRef": "10015"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1053",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/remoteinclude/script_hash.html",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "742",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script>\n      var target = location.hash.substr(1);\n      var head = document.getElementsByTagName('head')[0];\n      var script = document.createElement('script');\n      script.type = 'text/javascript';\n      script.src = target;\n      head.appendChild(script);\n    </script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1053",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/remoteinclude/script_hash.html",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "743",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "The presence of the 'Age' header indicates that that a HTTP/1.1 compliant caching server is in use.",
        "method": "GET",
        "evidence": "Age: 0",
        "pluginId": "10050",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as \"proxy\" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ",
        "messageId": "1053",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/remoteinclude/script_hash.html",
        "tags": {
          "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttp://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html (obsoleted by rfc7234)",
        "solution": "Validate that the response does not contain sensitive, personal or user-specific information.  If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.",
        "alert": "Retrieved from Cache",
        "param": "",
        "attack": "",
        "name": "Retrieved from Cache",
        "risk": "Informational",
        "id": "744",
        "alertRef": "10050"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1053",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/remoteinclude/script_hash.html",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "745",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1049",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_body_raw_post/1.6.0",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "746",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1053",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/remoteinclude/script_hash.html",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "748",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"//ajax.googleapis.com/ajax/libs/angularjs/1.6.0/angular.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "1049",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_body_raw_post/1.6.0",
        "tags": {
          "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "//ajax.googleapis.com/ajax/libs/angularjs/1.6.0/angular.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "749",
        "alertRef": "10017"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1054",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/redirect?url=http://example.com",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "750",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "The 301 or 302 response to a request for the following URL appeared to contain user input in the location header:\r\n\r\nhttps://public-firing-range.appspot.com/urldom/redirect?url=http://example.com\r\n\r\nThe user input found was:\r\n\r\nurl=http://example.com\r\n\r\nThe context was:\r\n\r\nhttp://example.com",
        "method": "GET",
        "evidence": "",
        "pluginId": "10028",
        "cweid": "601",
        "confidence": "Medium",
        "wascid": "38",
        "description": "Open redirects are one of the OWASP 2010 Top Ten vulnerabilities. This check looks at user-supplied input in query string parameters and POST data to identify where open redirects might be possible. Open redirects occur when an application allows user-supplied input (e.g. http://nottrusted.com) to control an offsite redirect. This is generally a pretty accurate way to find where 301 or 302 redirects could be exploited by spammers or phishing attacks.\n\nFor example an attacker could supply a user with the following link: http://example.com/example.php?url=http://malicious.example.com.",
        "messageId": "1054",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/redirect?url=http://example.com",
        "tags": {
          "OWASP_2021_A03": "https://owasp.org/Top10/A03_2021-Injection/",
          "WSTG-v42-CLNT-04": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/04-Testing_for_Client-side_URL_Redirect",
          "OWASP_2017_A01": "https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html\nhttps://cwe.mitre.org/data/definitions/601.html",
        "solution": "To avoid the open redirect vulnerability, parameters of the application script/program must be validated before sending 302 HTTP code (redirect) to the client browser. Implement safe redirect functionality that only redirects to relative URI's, or a list of trusted domains",
        "alert": "Open Redirect",
        "param": "url",
        "attack": "",
        "name": "Open Redirect",
        "risk": "High",
        "id": "752",
        "alertRef": "10028"
      },
      {
        "sourceid": "3",
        "other": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"q\" ].",
        "method": "GET",
        "evidence": "<form action=\"\" method=\"post\">",
        "pluginId": "10202",
        "cweid": "352",
        "confidence": "Low",
        "wascid": "9",
        "description": "No Anti-CSRF tokens were found in a HTML submission form.\nA cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.\n\nCSRF attacks are effective in a number of situations, including:\n    * The victim has an active session on the target site.\n    * The victim is authenticated via HTTP auth on the target site.\n    * The victim is on the same local network as the target site.\n\nCSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy.",
        "messageId": "1049",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_body_raw_post/1.6.0",
        "tags": {
          "OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
          "WSTG-v42-SESS-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/05-Testing_for_Cross_Site_Request_Forgery",
          "OWASP_2017_A05": "https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html"
        },
        "reference": "http://projects.webappsec.org/Cross-Site-Request-Forgery\nhttp://cwe.mitre.org/data/definitions/352.html",
        "solution": "Phase: Architecture and Design\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nFor example, use anti-CSRF packages such as the OWASP CSRFGuard.\n\nPhase: Implementation\nEnsure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script.\n\nPhase: Architecture and Design\nGenerate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330).\nNote that this can be bypassed using XSS.\n\nIdentify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.\nNote that this can be bypassed using XSS.\n\nUse the ESAPI Session Management control.\nThis control includes a component for CSRF.\n\nDo not use the GET method for any request that triggers a state change.\n\nPhase: Implementation\nCheck the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.",
        "alert": "Absence of Anti-CSRF Tokens",
        "param": "",
        "attack": "",
        "name": "Absence of Anti-CSRF Tokens",
        "risk": "Medium",
        "id": "753",
        "alertRef": "10202"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script src=\"//ajax.googleapis.com/ajax/libs/angularjs/1.6.0/angular.js\"></script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1049",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_body_raw_post/1.6.0",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "755",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1049",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_body_raw_post/1.6.0",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "757",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1055",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_body/1.6.0?q=test",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "758",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1049",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_body_raw_post/1.6.0",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "759",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1055",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_body/1.6.0?q=test",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "760",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"//ajax.googleapis.com/ajax/libs/angularjs/1.6.0/angular.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "1055",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_body/1.6.0?q=test",
        "tags": {
          "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "//ajax.googleapis.com/ajax/libs/angularjs/1.6.0/angular.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "762",
        "alertRef": "10017"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script src=\"//ajax.googleapis.com/ajax/libs/angularjs/1.6.0/angular.js\"></script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1055",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_body/1.6.0?q=test",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "763",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1055",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_body/1.6.0?q=test",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "764",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1055",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_body/1.6.0?q=test",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "766",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1057",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/encodeUrl/body?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "768",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1060",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/vulnerablelibraries/jquery.html",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "769",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "public, max-age=600",
        "pluginId": "10015",
        "cweid": "525",
        "confidence": "Low",
        "wascid": "13",
        "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
        "messageId": "1060",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/vulnerablelibraries/jquery.html",
        "tags": {
          "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/",
        "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
        "alert": "Re-examine Cache-control Directives",
        "param": "Cache-Control",
        "attack": "",
        "name": "Re-examine Cache-control Directives",
        "risk": "Informational",
        "id": "774",
        "alertRef": "10015"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1057",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/encodeUrl/body?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "775",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1060",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/vulnerablelibraries/jquery.html",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "776",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://code.jquery.com/jquery-1.8.1.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "1060",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/vulnerablelibraries/jquery.html",
        "tags": {
          "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://code.jquery.com/jquery-1.8.1.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "777",
        "alertRef": "10017"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1057",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/encodeUrl/body?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "779",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script src=\"https://code.jquery.com/jquery-1.8.1.js\"></script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1060",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/vulnerablelibraries/jquery.html",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "780",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "The presence of the 'Age' header indicates that that a HTTP/1.1 compliant caching server is in use.",
        "method": "GET",
        "evidence": "Age: 0",
        "pluginId": "10050",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as \"proxy\" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ",
        "messageId": "1060",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/vulnerablelibraries/jquery.html",
        "tags": {
          "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttp://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html (obsoleted by rfc7234)",
        "solution": "Validate that the response does not contain sensitive, personal or user-specific information.  If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.",
        "alert": "Retrieved from Cache",
        "param": "",
        "attack": "",
        "name": "Retrieved from Cache",
        "risk": "Informational",
        "id": "781",
        "alertRef": "10050"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1057",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/encodeUrl/body?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "782",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1060",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/vulnerablelibraries/jquery.html",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "783",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1062",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/document/referrer/eval",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "784",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1060",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/vulnerablelibraries/jquery.html",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "785",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1063",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/body?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "786",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1062",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/document/referrer/eval",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "787",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1066",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/locationpathname/documentwrite",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "788",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script>\n      if (document.referrer == \"\") {\n  // If the referrer is not set, we set the referrer by reloading the page.\n  location.href = location.href;\n} else {\n  var payload = document.referrer;\n\n  setTimeout(function() {\n    trigger(document.referrer);\n  }, 10);\n}\n// Sync trigger.\neval(payload);\n\n// Async trigger.\nfunction trigger(payload) {\n  eval(payload);\n};\n    </script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1062",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/document/referrer/eval",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "789",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1062",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/document/referrer/eval",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "790",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1063",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/body?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "791",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1063",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/body?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "792",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1062",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/document/referrer/eval",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "793",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1066",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/locationpathname/documentwrite",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "794",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1063",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/body?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "795",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script>\n      var payload = window.location.pathname;\ndocument.write(payload);\n\n    </script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1066",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/locationpathname/documentwrite",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "797",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1066",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/locationpathname/documentwrite",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "798",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1066",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/locationpathname/documentwrite",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "799",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1069",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_body_raw_escaped/1.4.0?q=test",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "804",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1069",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_body_raw_escaped/1.4.0?q=test",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "807",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"//ajax.googleapis.com/ajax/libs/angularjs/1.4.0/angular.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "1069",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_body_raw_escaped/1.4.0?q=test",
        "tags": {
          "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "//ajax.googleapis.com/ajax/libs/angularjs/1.4.0/angular.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "808",
        "alertRef": "10017"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script src=\"//ajax.googleapis.com/ajax/libs/angularjs/1.4.0/angular.js\"></script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1069",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_body_raw_escaped/1.4.0?q=test",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "810",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1069",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_body_raw_escaped/1.4.0?q=test",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "812",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1072",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/document/referrer/innerHtml",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "813",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1073",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/escapeHtml/body?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "814",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1069",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_body_raw_escaped/1.4.0?q=test",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "816",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1073",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/escapeHtml/body?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "817",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1072",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/document/referrer/innerHtml",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "818",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1073",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/escapeHtml/body?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "819",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1073",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/escapeHtml/body?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "820",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script>\n      if (document.referrer == \"\") {\n  // If the referrer is not set, we set the referrer by reloading the page.\n  location.href = location.href;\n} else {\n  var payload = document.referrer;\n\n  setTimeout(function() {\n    trigger(document.referrer);\n  }, 10);\n}\nvar div = document.createElement('div');\ndocument.documentElement.appendChild(div);\n\n// Sync trigger.\ndiv.innerHTML = payload;\n\n// Async trigger.\nfunction trigger(payload) {\n  div.innerHTML = payload;\n};\n\n    </script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1072",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/document/referrer/innerHtml",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "821",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1072",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/document/referrer/innerHtml",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "822",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1075",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_body_raw_escaped_alt_symbols/1.4.0?q=test",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "823",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1072",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/document/referrer/innerHtml",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "824",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1075",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_body_raw_escaped_alt_symbols/1.4.0?q=test",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "826",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"//ajax.googleapis.com/ajax/libs/angularjs/1.4.0/angular.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "1075",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_body_raw_escaped_alt_symbols/1.4.0?q=test",
        "tags": {
          "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "//ajax.googleapis.com/ajax/libs/angularjs/1.4.0/angular.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "829",
        "alertRef": "10017"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script src=\"//ajax.googleapis.com/ajax/libs/angularjs/1.4.0/angular.js\"></script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1075",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_body_raw_escaped_alt_symbols/1.4.0?q=test",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "832",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1075",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_body_raw_escaped_alt_symbols/1.4.0?q=test",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "833",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1079",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/document/referrer/documentWrite",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "835",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1075",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_body_raw_escaped_alt_symbols/1.4.0?q=test",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "836",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1079",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/document/referrer/documentWrite",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "839",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script>\n      if (document.referrer == \"\") {\n  // If the referrer is not set, we set the referrer by reloading the page.\n  location.href = location.href;\n} else {\n  var payload = document.referrer;\n\n  setTimeout(function() {\n    trigger(document.referrer);\n  }, 10);\n}\n// Sync trigger.\ndocument.write(payload);\n\n// Async trigger.\nfunction trigger(payload) {\n  document.write(payload);\n}\n    </script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1079",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/document/referrer/documentWrite",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "843",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1079",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/document/referrer/documentWrite",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "844",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1079",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/document/referrer/documentWrite",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "845",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1087",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/window/name/eval",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "861",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1087",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/window/name/eval",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "864",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script>\n      if (window.name == \"\") {\n  window.name = \"badvalue='a'\";\n}\n\nvar payload = window.name;\n\nsetTimeout(function() {\n  trigger(window.name);\n}, 10);\n// Sync trigger.\neval(payload);\n\n// Async trigger.\nfunction trigger(payload) {\n  eval(payload);\n};\n    </script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1087",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/window/name/eval",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "865",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1087",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/window/name/eval",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "866",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1090",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/location/rangeCreateContextualFragment",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "867",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1087",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/window/name/eval",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "868",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1091",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_body_alt_symbols_raw/1.6.0?q=test",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "869",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1090",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/location/rangeCreateContextualFragment",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "870",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script>\n      var payload = window.location;\nvar div = document.createElement('div');\ndiv.id = 'divEl';\ndocument.documentElement.appendChild(div);\n\nvar range = document.createRange();\n// make the parent of the first div in the document becomes the context node\nrange.selectNode(document.getElementsByTagName(\"div\").item(0));\nvar documentFragment = range.createContextualFragment(payload);\ndocument.body.appendChild(documentFragment);\n\n    </script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1090",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/location/rangeCreateContextualFragment",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "873",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1090",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/location/rangeCreateContextualFragment",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "875",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1091",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_body_alt_symbols_raw/1.6.0?q=test",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "876",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"//ajax.googleapis.com/ajax/libs/angularjs/1.6.0/angular.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "1091",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_body_alt_symbols_raw/1.6.0?q=test",
        "tags": {
          "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "//ajax.googleapis.com/ajax/libs/angularjs/1.6.0/angular.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "877",
        "alertRef": "10017"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1090",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/location/rangeCreateContextualFragment",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "878",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script src=\"//ajax.googleapis.com/ajax/libs/angularjs/1.6.0/angular.js\"></script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1091",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_body_alt_symbols_raw/1.6.0?q=test",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "879",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1091",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_body_alt_symbols_raw/1.6.0?q=test",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "882",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1091",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_body_alt_symbols_raw/1.6.0?q=test",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "883",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1095",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_body_attribute_ng/1.4.0?q=test",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "885",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1096",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/location/documentwriteln",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "888",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1095",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_body_attribute_ng/1.4.0?q=test",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "889",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"//ajax.googleapis.com/ajax/libs/angularjs/1.4.0/angular.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "1095",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_body_attribute_ng/1.4.0?q=test",
        "tags": {
          "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "//ajax.googleapis.com/ajax/libs/angularjs/1.4.0/angular.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "890",
        "alertRef": "10017"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script src=\"//ajax.googleapis.com/ajax/libs/angularjs/1.4.0/angular.js\"></script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1095",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_body_attribute_ng/1.4.0?q=test",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "892",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1096",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/location/documentwriteln",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "893",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1095",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_body_attribute_ng/1.4.0?q=test",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "894",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:\r\n\r\nhttps://public-firing-range.appspot.com/angular/angular_body_attribute_ng/1.4.0?q=test\r\n\r\nappears to include user input in: \r\n\r\na(n) [div] tag [ng-class] attribute \r\n\r\nThe user input found was:\r\nq=test\r\n\r\nThe user-controlled value was:\r\ntest",
        "method": "GET",
        "evidence": "",
        "pluginId": "10031",
        "cweid": "20",
        "confidence": "Low",
        "wascid": "20",
        "description": "This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.",
        "messageId": "1095",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_body_attribute_ng/1.4.0?q=test",
        "tags": {
          "OWASP_2021_A03": "https://owasp.org/Top10/A03_2021-Injection/",
          "OWASP_2017_A01": "https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html"
        },
        "reference": "http://websecuritytool.codeplex.com/wikipage?title=Checks#user-controlled-html-attribute",
        "solution": "Validate all input and sanitize output it before writing to any HTML attributes.",
        "alert": "User Controllable HTML Element Attribute (Potential XSS)",
        "param": "q",
        "attack": "",
        "name": "User Controllable HTML Element Attribute (Potential XSS)",
        "risk": "Informational",
        "id": "895",
        "alertRef": "10031"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script>\n      var payload = window.location;\ndocument.writeln(payload);\n\n    </script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1096",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/location/documentwriteln",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "896",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1096",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/location/documentwriteln",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "898",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1095",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_body_attribute_ng/1.4.0?q=test",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "899",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1096",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/location/documentwriteln",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "900",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1101",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/locationsearch/documentwrite",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "911",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1101",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/locationsearch/documentwrite",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "912",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script>\n      var payload = window.location.search.substr(1);\ndocument.write(payload);\n\n    </script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1101",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/locationsearch/documentwrite",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "915",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1101",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/locationsearch/documentwrite",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "916",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1103",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/head?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "917",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1101",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/locationsearch/documentwrite",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "918",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1104",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/URL/documentwrite",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "919",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1103",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/head?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "921",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1103",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/head?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "923",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1106",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/escapeHtml/head?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "924",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1104",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/URL/documentwrite",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "925",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1103",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/head?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "927",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script>\n      var payload = document.URL;\ndocument.write(payload);\n\n    </script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1104",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/URL/documentwrite",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "928",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1104",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/URL/documentwrite",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "929",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1106",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/escapeHtml/head?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "930",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1104",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/URL/documentwrite",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "931",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1106",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/escapeHtml/head?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "932",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1106",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/escapeHtml/head?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "933",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1107",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/URLUnencoded/documentwrite",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "934",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1107",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/URLUnencoded/documentwrite",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "935",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script>\n      var payload = document.URLUnencoded;\ndocument.write(payload);\n\n    </script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1107",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/URLUnencoded/documentwrite",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "936",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1107",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/URLUnencoded/documentwrite",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "937",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1107",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/address/URLUnencoded/documentwrite",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "938",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1114",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/hash/a.href",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "939",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1112",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/leakedcookie/leakedinresource",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "941",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1110",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_body_attribute_non_ng/1.4.0?q=test",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "942",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1114",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/hash/a.href",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "943",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1112",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/leakedcookie/leakedinresource",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "944",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "Set-Cookie: my_secret_cookie",
        "pluginId": "10054",
        "cweid": "1275",
        "confidence": "Medium",
        "wascid": "13",
        "description": "A cookie has been set without the SameSite attribute, which means that the cookie can be sent as a result of a 'cross-site' request. The SameSite attribute is an effective counter measure to cross-site request forgery, cross-site script inclusion, and timing attacks.",
        "messageId": "1112",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/leakedcookie/leakedinresource",
        "tags": {
          "OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
          "WSTG-v42-SESS-02": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes",
          "OWASP_2017_A05": "https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html"
        },
        "reference": "https://tools.ietf.org/html/draft-ietf-httpbis-cookie-same-site",
        "solution": "Ensure that the SameSite attribute is set to either 'lax' or ideally 'strict' for all cookies.",
        "alert": "Cookie without SameSite Attribute",
        "param": "my_secret_cookie",
        "attack": "",
        "name": "Cookie without SameSite Attribute",
        "risk": "Low",
        "id": "945",
        "alertRef": "10054"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1110",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_body_attribute_non_ng/1.4.0?q=test",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "946",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script>\n      var payload = document.location.hash.substr(1);\nvar anchor = document.createElement(\"a\");\nanchor.href = payload;\nanchor.text = \"Here's an anchor link\";\ndocument.body.appendChild(anchor);\n\n    </script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1114",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/hash/a.href",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "948",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "Set-Cookie: my_secret_cookie",
        "pluginId": "10011",
        "cweid": "614",
        "confidence": "Medium",
        "wascid": "13",
        "description": "A cookie has been set without the secure flag, which means that the cookie can be accessed via unencrypted connections.",
        "messageId": "1112",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/leakedcookie/leakedinresource",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-SESS-02": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes.html",
        "solution": "Whenever a cookie contains sensitive information or is a session token, then it should always be passed using an encrypted channel. Ensure that the secure flag is set for cookies containing such sensitive information.",
        "alert": "Cookie Without Secure Flag",
        "param": "my_secret_cookie",
        "attack": "",
        "name": "Cookie Without Secure Flag",
        "risk": "Low",
        "id": "949",
        "alertRef": "10011"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"//ajax.googleapis.com/ajax/libs/angularjs/1.4.0/angular.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "1110",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_body_attribute_non_ng/1.4.0?q=test",
        "tags": {
          "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "//ajax.googleapis.com/ajax/libs/angularjs/1.4.0/angular.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "951",
        "alertRef": "10017"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1114",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/hash/a.href",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "952",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script src=\"//ajax.googleapis.com/ajax/libs/angularjs/1.4.0/angular.js\"></script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1110",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_body_attribute_non_ng/1.4.0?q=test",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "953",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1114",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/hash/a.href",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "955",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1110",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_body_attribute_non_ng/1.4.0?q=test",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "956",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script src=\"leakedcookie.js\"></script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1112",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/leakedcookie/leakedinresource",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "958",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1110",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_body_attribute_non_ng/1.4.0?q=test",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "959",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1112",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/leakedcookie/leakedinresource",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "961",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1112",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/leakedcookie/leakedinresource",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "962",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1117",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_body_attribute_non_ng_raw/1.4.0?q=test",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "963",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1117",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_body_attribute_non_ng_raw/1.4.0?q=test",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "965",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1120",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/remoteinclude/parameter/object_raw?q=https://google.com",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "966",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"//ajax.googleapis.com/ajax/libs/angularjs/1.4.0/angular.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "1117",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_body_attribute_non_ng_raw/1.4.0?q=test",
        "tags": {
          "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "//ajax.googleapis.com/ajax/libs/angularjs/1.4.0/angular.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "967",
        "alertRef": "10017"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script src=\"//ajax.googleapis.com/ajax/libs/angularjs/1.4.0/angular.js\"></script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1117",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_body_attribute_non_ng_raw/1.4.0?q=test",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "968",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1117",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_body_attribute_non_ng_raw/1.4.0?q=test",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "970",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1120",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/remoteinclude/parameter/object_raw?q=https://google.com",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "971",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:\r\n\r\nhttps://public-firing-range.appspot.com/angular/angular_body_attribute_non_ng_raw/1.4.0?q=test\r\n\r\nappears to include user input in: \r\n\r\na(n) [div] tag [class] attribute \r\n\r\nThe user input found was:\r\nq=test\r\n\r\nThe user-controlled value was:\r\ntest",
        "method": "GET",
        "evidence": "",
        "pluginId": "10031",
        "cweid": "20",
        "confidence": "Low",
        "wascid": "20",
        "description": "This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.",
        "messageId": "1117",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_body_attribute_non_ng_raw/1.4.0?q=test",
        "tags": {
          "OWASP_2021_A03": "https://owasp.org/Top10/A03_2021-Injection/",
          "OWASP_2017_A01": "https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html"
        },
        "reference": "http://websecuritytool.codeplex.com/wikipage?title=Checks#user-controlled-html-attribute",
        "solution": "Validate all input and sanitize output it before writing to any HTML attributes.",
        "alert": "User Controllable HTML Element Attribute (Potential XSS)",
        "param": "q",
        "attack": "",
        "name": "User Controllable HTML Element Attribute (Potential XSS)",
        "risk": "Informational",
        "id": "972",
        "alertRef": "10031"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1120",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/remoteinclude/parameter/object_raw?q=https://google.com",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "973",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1117",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_body_attribute_non_ng_raw/1.4.0?q=test",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "974",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:\r\n\r\nhttps://public-firing-range.appspot.com/remoteinclude/parameter/object_raw?q=https://google.com\r\n\r\nappears to include user input in: \r\n\r\na(n) [object] tag [data] attribute \r\n\r\nThe user input found was:\r\nq=https://google.com\r\n\r\nThe user-controlled value was:\r\nhttps://google.com",
        "method": "GET",
        "evidence": "",
        "pluginId": "10031",
        "cweid": "20",
        "confidence": "Low",
        "wascid": "20",
        "description": "This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.",
        "messageId": "1120",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/remoteinclude/parameter/object_raw?q=https://google.com",
        "tags": {
          "OWASP_2021_A03": "https://owasp.org/Top10/A03_2021-Injection/",
          "OWASP_2017_A01": "https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html"
        },
        "reference": "http://websecuritytool.codeplex.com/wikipage?title=Checks#user-controlled-html-attribute",
        "solution": "Validate all input and sanitize output it before writing to any HTML attributes.",
        "alert": "User Controllable HTML Element Attribute (Potential XSS)",
        "param": "q",
        "attack": "",
        "name": "User Controllable HTML Element Attribute (Potential XSS)",
        "risk": "Informational",
        "id": "978",
        "alertRef": "10031"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1120",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/remoteinclude/parameter/object_raw?q=https://google.com",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "980",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1122",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reverseclickjacking/singlepage/ParameterInQuery/InCallback/?q=urc_button.click",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "983",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1122",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reverseclickjacking/singlepage/ParameterInQuery/InCallback/?q=urc_button.click",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "989",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1128",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/tags/meta?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "990",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script src=\n  '/reverseclickjacking/jsonpendpoint?q=&callback=urc_button.click'></script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1122",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reverseclickjacking/singlepage/ParameterInQuery/InCallback/?q=urc_button.click",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "992",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1122",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reverseclickjacking/singlepage/ParameterInQuery/InCallback/?q=urc_button.click",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "993",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1122",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reverseclickjacking/singlepage/ParameterInQuery/InCallback/?q=urc_button.click",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "994",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1129",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/tags/div?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "997",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1130",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/window/name/innerHtml",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "999",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1130",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/window/name/innerHtml",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "1005",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script>\n      if (window.name == \"\") {\n  window.name = \"badvalue='a'\";\n}\n\nvar payload = window.name;\n\nsetTimeout(function() {\n  trigger(window.name);\n}, 10);\nvar div = document.createElement('div');\ndocument.documentElement.appendChild(div);\n\n// Sync trigger.\ndiv.innerHTML = payload;\n\n// Async trigger.\nfunction trigger(payload) {\n  div.innerHTML = payload;\n};\n\n    </script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1130",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/window/name/innerHtml",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "1009",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1130",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/window/name/innerHtml",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "1015",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1130",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/window/name/innerHtml",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "1020",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1137",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/window/name/documentWrite",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "1023",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1135",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_form_parse/1.6.0",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "1024",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1138",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_cookie_parse/1.6.0",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "1025",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1137",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/window/name/documentWrite",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "1026",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script>\n      if (window.name == \"\") {\n  window.name = \"badvalue='a'\";\n}\n\nvar payload = window.name;\n\nsetTimeout(function() {\n  trigger(window.name);\n}, 10);\n// Sync trigger.\ndocument.write(payload);\n\n// Async trigger.\nfunction trigger(payload) {\n  document.write(payload);\n}\n    </script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1137",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/window/name/documentWrite",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "1029",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1137",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/window/name/documentWrite",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "1031",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1137",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/window/name/documentWrite",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "1033",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1138",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_cookie_parse/1.6.0",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "1034",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1135",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_form_parse/1.6.0",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "1035",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"//ajax.googleapis.com/ajax/libs/angularjs/1.6.0/angular.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "1135",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_form_parse/1.6.0",
        "tags": {
          "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "//ajax.googleapis.com/ajax/libs/angularjs/1.6.0/angular.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "1036",
        "alertRef": "10017"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"//ajax.googleapis.com/ajax/libs/angularjs/1.6.0/angular.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "1138",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_cookie_parse/1.6.0",
        "tags": {
          "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "//ajax.googleapis.com/ajax/libs/angularjs/1.6.0/angular.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "1037",
        "alertRef": "10017"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script src=\"//ajax.googleapis.com/ajax/libs/angularjs/1.6.0/angular.js\"></script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1135",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_form_parse/1.6.0",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "1038",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script src=\"//ajax.googleapis.com/ajax/libs/angularjs/1.6.0/angular.js\"></script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1138",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_cookie_parse/1.6.0",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "1039",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1135",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_form_parse/1.6.0",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "1040",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1138",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_cookie_parse/1.6.0",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "1041",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1135",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_form_parse/1.6.0",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "1042",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1138",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_cookie_parse/1.6.0",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "1043",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1141",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/localStorage/array/eval",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "1045",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1141",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/localStorage/array/eval",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "1048",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1143",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reverseclickjacking/singlepage/ParameterInQuery/OtherParameter/?q=%26callback%3Durc_button.click%23",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "1051",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script>\n      if (!localStorage['badValue']) {\n  localStorage['badValue'] = Math.random();\n}\nvar payload = localStorage['badValue'];\n\nsetTimeout(function() {\n  trigger(localStorage['badValue']); // Using the async trigger.\n\n  // Clean up the localStorage to avoid causing side-effect on subsequent tests.\n  localStorage.clear();\n}, 10);\n// Sync trigger.\neval(payload);\n\n// Async trigger.\nfunction trigger(payload) {\n  eval(payload);\n};\n    </script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1141",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/localStorage/array/eval",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "1052",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1141",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/localStorage/array/eval",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "1053",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1146",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/localStorage/function/eval",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "1054",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1141",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/localStorage/array/eval",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "1055",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1143",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reverseclickjacking/singlepage/ParameterInQuery/OtherParameter/?q=%26callback%3Durc_button.click%23",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "1056",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script src=\n  '/reverseclickjacking/jsonpendpoint?q=&callback=urc_button.click#&callback=callbackFunc'></script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1143",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reverseclickjacking/singlepage/ParameterInQuery/OtherParameter/?q=%26callback%3Durc_button.click%23",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "1057",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1143",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reverseclickjacking/singlepage/ParameterInQuery/OtherParameter/?q=%26callback%3Durc_button.click%23",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "1059",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1146",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/localStorage/function/eval",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "1060",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1143",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reverseclickjacking/singlepage/ParameterInQuery/OtherParameter/?q=%26callback%3Durc_button.click%23",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "1062",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script>\n      if (!localStorage.getItem('badValue')) {\n  localStorage.setItem('badValue', Math.random());\n}\n\nvar payload = localStorage.getItem('badValue'); // Using sync trigger.\n\nsetTimeout(function() {\n  trigger(localStorage.getItem('badValue')); // Using the async trigger.\n\n  // Clean up the localStorage to avoid causing side-effect on subsequent tests.\n  localStorage.clear();\n}, 10);\n// Sync trigger.\neval(payload);\n\n// Async trigger.\nfunction trigger(payload) {\n  eval(payload);\n};\n    </script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1146",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/localStorage/function/eval",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "1063",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1146",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/localStorage/function/eval",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "1067",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1150",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reverseclickjacking/singlepage/ParameterInFragment/OtherParameter/",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "1071",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1146",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/localStorage/function/eval",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "1072",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1150",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reverseclickjacking/singlepage/ParameterInFragment/OtherParameter/",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "1077",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "The following pattern was used: \\bFROM\\b and was detected in the element starting with: \"<script>\n    var resultDiv = document.getElementById('result');\n\n      /**\n       * Callback function that receives data from th\", see evidence field for the suspicious comment/snippet.",
        "method": "GET",
        "evidence": "from",
        "pluginId": "10027",
        "cweid": "200",
        "confidence": "Low",
        "wascid": "13",
        "description": "The response appears to contain suspicious comments which may help an attacker. Note: Matches made within script blocks or files are against the entire content not only comments.",
        "messageId": "1150",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reverseclickjacking/singlepage/ParameterInFragment/OtherParameter/",
        "tags": {
          "OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
          "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html"
        },
        "reference": "",
        "solution": "Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.",
        "alert": "Information Disclosure - Suspicious Comments",
        "param": "",
        "attack": "",
        "name": "Information Disclosure - Suspicious Comments",
        "risk": "Informational",
        "id": "1079",
        "alertRef": "10027"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script>\n    var resultDiv = document.getElementById('result');\n\n      /**\n       * Callback function that receives data from the JSONP callback and\n       * prints a \"stringified\" representation of the response, just for\n       * human debugging.\n       */\n      function callbackFunc(data) {\n        resultDiv.textContent = 'JSONP data received: ' + JSON.stringify(data);\n      }\n\n      try {\n        // Retrieve the \"q\" parameter in the URL fragment\n        var q = decodeURIComponent(new RegExp('[?&#]q=([^&]*)')\n            .exec(location.hash)[1]);\n\n        // Validate it (prevents trivial XSS)\n        var allowedPattern = /^[a-zA-Z0-9\\._&#=]+$/;\n        if (allowedPattern.test(q)) {\n          // The vulnerability arises because of this insecure concatenation\n          var url = '/reverseclickjacking/jsonpendpoint?q=' + q\n              + '&callback=callbackFunc';\n\n          /* Create the <script> tag that executes the JS code returned by\n           * the JSONP endpoint. */\n          var s = document.createElement('script');\n          s.type = 'text/javascript';\n          s.src = url;\n          document.body.appendChild(s);\n        }\n      } catch(e) {\n        resultDiv.textContent = 'Please specify a q parameter in the fragment.';\n      }\n  </script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1150",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reverseclickjacking/singlepage/ParameterInFragment/OtherParameter/",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "1080",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1150",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reverseclickjacking/singlepage/ParameterInFragment/OtherParameter/",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "1081",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1150",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reverseclickjacking/singlepage/ParameterInFragment/OtherParameter/",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "1083",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1156",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/localStorage/function/innerHtml",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "1084",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1156",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/localStorage/function/innerHtml",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "1089",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script>\n      if (!localStorage.getItem('badValue')) {\n  localStorage.setItem('badValue', Math.random());\n}\n\nvar payload = localStorage.getItem('badValue'); // Using sync trigger.\n\nsetTimeout(function() {\n  trigger(localStorage.getItem('badValue')); // Using the async trigger.\n\n  // Clean up the localStorage to avoid causing side-effect on subsequent tests.\n  localStorage.clear();\n}, 10);\nvar div = document.createElement('div');\ndocument.documentElement.appendChild(div);\n\n// Sync trigger.\ndiv.innerHTML = payload;\n\n// Async trigger.\nfunction trigger(payload) {\n  div.innerHTML = payload;\n};\n\n    </script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1156",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/localStorage/function/innerHtml",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "1096",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1156",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/localStorage/function/innerHtml",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "1097",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1156",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/localStorage/function/innerHtml",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "1099",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1160",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reverseclickjacking/multipage/ParameterInQuery/InCallback/WithoutXFO/?q=foo",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "1105",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1160",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reverseclickjacking/multipage/ParameterInQuery/InCallback/WithoutXFO/?q=foo",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "1108",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1166",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reverseclickjacking/multipage/ParameterInQuery/OtherParameter/WithoutXFO/?q=%26callback%3Dfoo%23",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "1109",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script src=\n  '/reverseclickjacking/jsonpendpoint?q=&callback=foo'></script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1160",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reverseclickjacking/multipage/ParameterInQuery/InCallback/WithoutXFO/?q=foo",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "1111",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1160",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reverseclickjacking/multipage/ParameterInQuery/InCallback/WithoutXFO/?q=foo",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "1114",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1160",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reverseclickjacking/multipage/ParameterInQuery/InCallback/WithoutXFO/?q=foo",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "1116",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1166",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reverseclickjacking/multipage/ParameterInQuery/OtherParameter/WithoutXFO/?q=%26callback%3Dfoo%23",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "1119",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script src=\n  '/reverseclickjacking/jsonpendpoint?q=&callback=foo#&callback=callbackFunc'></script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1166",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reverseclickjacking/multipage/ParameterInQuery/OtherParameter/WithoutXFO/?q=%26callback%3Dfoo%23",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "1120",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1166",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reverseclickjacking/multipage/ParameterInQuery/OtherParameter/WithoutXFO/?q=%26callback%3Dfoo%23",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "1121",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1169",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_post_message_parse/1.6.0",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "1122",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1166",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reverseclickjacking/multipage/ParameterInQuery/OtherParameter/WithoutXFO/?q=%26callback%3Dfoo%23",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "1123",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1169",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_post_message_parse/1.6.0",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "1125",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"//ajax.googleapis.com/ajax/libs/angularjs/1.6.0/angular.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "1169",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_post_message_parse/1.6.0",
        "tags": {
          "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "//ajax.googleapis.com/ajax/libs/angularjs/1.6.0/angular.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "1126",
        "alertRef": "10017"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script src=\"//ajax.googleapis.com/ajax/libs/angularjs/1.6.0/angular.js\"></script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1169",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_post_message_parse/1.6.0",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "1127",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1169",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_post_message_parse/1.6.0",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "1129",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1169",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_post_message_parse/1.6.0",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "1132",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1175",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/tags/img?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "1142",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1176",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/tags/style?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "1145",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1178",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/localStorage/function/documentWrite",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "1149",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1179",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_storage_parse/1.6.0",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "1150",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1179",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_storage_parse/1.6.0",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "1153",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1178",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/localStorage/function/documentWrite",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "1154",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"//ajax.googleapis.com/ajax/libs/angularjs/1.6.0/angular.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "1179",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_storage_parse/1.6.0",
        "tags": {
          "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "//ajax.googleapis.com/ajax/libs/angularjs/1.6.0/angular.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "1155",
        "alertRef": "10017"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script src=\"//ajax.googleapis.com/ajax/libs/angularjs/1.6.0/angular.js\"></script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1179",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_storage_parse/1.6.0",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "1159",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script>\n      if (!localStorage.getItem('badValue')) {\n  localStorage.setItem('badValue', Math.random());\n}\n\nvar payload = localStorage.getItem('badValue'); // Using sync trigger.\n\nsetTimeout(function() {\n  trigger(localStorage.getItem('badValue')); // Using the async trigger.\n\n  // Clean up the localStorage to avoid causing side-effect on subsequent tests.\n  localStorage.clear();\n}, 10);\n// Sync trigger.\ndocument.write(payload);\n\n// Async trigger.\nfunction trigger(payload) {\n  document.write(payload);\n}\n    </script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1178",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/localStorage/function/documentWrite",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "1160",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1178",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/localStorage/function/documentWrite",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "1161",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1179",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_storage_parse/1.6.0",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "1162",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1178",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/localStorage/function/documentWrite",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "1165",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1179",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_storage_parse/1.6.0",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "1166",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1184",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/localStorage/property/documentWrite",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "1171",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1186",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/hash/form.action",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "1172",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1186",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/hash/form.action",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "1174",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1184",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/localStorage/property/documentWrite",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "1175",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script>\n      var payload = document.location.hash.substr(1);\nvar formElement = document.createElement(\"form\");\nformElement.action = payload;\nvar inputElement = document.createElement(\"input\");\ninputElement.type = \"submit\";\ninputElement.value = \"Submit!\";\nformElement.appendChild(inputElement);\ndocument.body.appendChild(formElement);\n\n    </script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1186",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/hash/form.action",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "1177",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1186",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/hash/form.action",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "1179",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script>\n      if (!localStorage.badValue) {\n  localStorage.badValue = Math.random();\n}\nvar payload = localStorage.badValue;\n\nsetTimeout(function() {\n  trigger(localStorage.badValue); // Using the async trigger.\n\n  // Clean up the localStorage to avoid causing side-effect on subsequent tests.\n  localStorage.clear();\n}, 10);\n// Sync trigger.\ndocument.write(payload);\n\n// Async trigger.\nfunction trigger(payload) {\n  document.write(payload);\n}\n    </script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1184",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/localStorage/property/documentWrite",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "1181",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1184",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/localStorage/property/documentWrite",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "1183",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1186",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/hash/form.action",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "1185",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1184",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/localStorage/property/documentWrite",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "1187",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1187",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/title?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "1189",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1188",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/hash/document.location",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "1190",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1187",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/title?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "1193",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1187",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/title?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "1194",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1188",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/hash/document.location",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "1195",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1187",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/title?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "1196",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script>\n      var payload = document.location.hash.substr(1);\ndocument.location = payload;\n\n    </script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1188",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/hash/document.location",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "1199",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1188",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/hash/document.location",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "1201",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1188",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/hash/document.location",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "1203",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1192",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/external/localStorage/property/documentWrite",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "1210",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1192",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/external/localStorage/property/documentWrite",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "1214",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script src=\"/dom/toxicdomscripts/localStorage/property/documentWrite\"></script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1192",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/external/localStorage/property/documentWrite",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "1216",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1197",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/encodeUrl/head?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "1217",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1192",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/external/localStorage/property/documentWrite",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "1218",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1198",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/external/localStorage/function/innerHtml",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "1219",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1192",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/external/localStorage/property/documentWrite",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "1220",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1197",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/encodeUrl/head?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "1221",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1198",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/external/localStorage/function/innerHtml",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "1222",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script src=\"/dom/toxicdomscripts/localStorage/function/innerHtml\"></script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1198",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/external/localStorage/function/innerHtml",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "1224",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1197",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/encodeUrl/head?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "1225",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1202",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/external/localStorage/function/documentWrite",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "1226",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1198",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/external/localStorage/function/innerHtml",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "1227",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1197",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/encodeUrl/head?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "1228",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1198",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/external/localStorage/function/innerHtml",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "1229",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1202",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/external/localStorage/function/documentWrite",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "1231",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script src=\"/dom/toxicdomscripts/localStorage/function/documentWrite\"></script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1202",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/external/localStorage/function/documentWrite",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "1234",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1202",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/external/localStorage/function/documentWrite",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "1235",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1202",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/external/localStorage/function/documentWrite",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "1238",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1207",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/redirect/meta?q=/",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "1249",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1207",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/redirect/meta?q=/",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "1253",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1207",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/redirect/meta?q=/",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "1256",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:\r\n\r\nhttps://public-firing-range.appspot.com/redirect/meta?q=/\r\n\r\nappears to include user input in: \r\n\r\na(n) [meta] tag [content] attribute \r\n\r\nThe user input found was:\r\nq=/\r\n\r\nThe user-controlled value was:\r\n0;/",
        "method": "GET",
        "evidence": "",
        "pluginId": "10031",
        "cweid": "20",
        "confidence": "Low",
        "wascid": "20",
        "description": "This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.",
        "messageId": "1207",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/redirect/meta?q=/",
        "tags": {
          "OWASP_2021_A03": "https://owasp.org/Top10/A03_2021-Injection/",
          "OWASP_2017_A01": "https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html"
        },
        "reference": "http://websecuritytool.codeplex.com/wikipage?title=Checks#user-controlled-html-attribute",
        "solution": "Validate all input and sanitize output it before writing to any HTML attributes.",
        "alert": "User Controllable HTML Element Attribute (Potential XSS)",
        "param": "q",
        "attack": "",
        "name": "User Controllable HTML Element Attribute (Potential XSS)",
        "risk": "Informational",
        "id": "1258",
        "alertRef": "10031"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1207",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/redirect/meta?q=/",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "1259",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1212",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/external/localStorage/array/eval",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "1276",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1215",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/sessionStorage/array/eval",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "1281",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1212",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/external/localStorage/array/eval",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "1284",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1215",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/sessionStorage/array/eval",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "1285",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script src=\"/dom/toxicdomscripts/localStorage/array/eval\"></script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1212",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/external/localStorage/array/eval",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "1286",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1212",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/external/localStorage/array/eval",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "1287",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script>\n      if (!sessionStorage['badValue']) {\n  sessionStorage['badValue'] = Math.random();\n}\n\nvar payload = sessionStorage['badValue'];\n\nsetTimeout(function() {\n  trigger(sessionStorage['badValue']); // Using the async trigger.\n\n  // Clean up the localStorage to avoid causing side-effect on subsequent tests.\n  sessionStorage.clear();\n}, 10);\n// Sync trigger.\neval(payload);\n\n// Async trigger.\nfunction trigger(payload) {\n  eval(payload);\n};\n    </script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1215",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/sessionStorage/array/eval",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "1288",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1212",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/external/localStorage/array/eval",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "1289",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1215",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/sessionStorage/array/eval",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "1290",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1215",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/sessionStorage/array/eval",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "1291",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1218",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/escapeHtml/body_comment?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "1292",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1219",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/external/localStorage/function/eval",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "1293",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1218",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/escapeHtml/body_comment?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "1295",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1219",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/external/localStorage/function/eval",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "1296",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1222",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/sessionStorage/function/eval",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "1297",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1218",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/escapeHtml/body_comment?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "1298",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script src=\"/dom/toxicdomscripts/localStorage/function/eval\"></script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1219",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/external/localStorage/function/eval",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "1299",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1219",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/external/localStorage/function/eval",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "1300",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1218",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/escapeHtml/body_comment?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "1301",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1219",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/external/localStorage/function/eval",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "1303",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1222",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/sessionStorage/function/eval",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "1304",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script>\n      if (!sessionStorage.getItem('badValue')) {\n  sessionStorage.setItem('badValue', Math.random());\n}\n\nvar payload = sessionStorage.getItem('badValue'); // Using sync trigger.\n\nsetTimeout(function() {\n  trigger(sessionStorage.getItem('badValue'));\n  // Clean up the sessionStorage to avoid side-effects on subsequent tests.\n  sessionStorage.clear();\n}, 10);\n// Sync trigger.\neval(payload);\n\n// Async trigger.\nfunction trigger(payload) {\n  eval(payload);\n};\n    </script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1222",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/sessionStorage/function/eval",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "1308",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1222",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/sessionStorage/function/eval",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "1309",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1222",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/sessionStorage/function/eval",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "1310",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1226",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/remoteinclude/object_hash.html",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "1313",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "public, max-age=600",
        "pluginId": "10015",
        "cweid": "525",
        "confidence": "Low",
        "wascid": "13",
        "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
        "messageId": "1226",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/remoteinclude/object_hash.html",
        "tags": {
          "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/",
        "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
        "alert": "Re-examine Cache-control Directives",
        "param": "Cache-Control",
        "attack": "",
        "name": "Re-examine Cache-control Directives",
        "risk": "Informational",
        "id": "1322",
        "alertRef": "10015"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1226",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/remoteinclude/object_hash.html",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "1325",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script>\n      var target = location.hash.substr(1);\n      var body = document.getElementsByTagName('body')[0];\n      var object = document.createElement('object');\n      object.data = target;\n      body.appendChild(object);\n    </script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1226",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/remoteinclude/object_hash.html",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "1326",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "The presence of the 'Age' header indicates that that a HTTP/1.1 compliant caching server is in use.",
        "method": "GET",
        "evidence": "Age: 0",
        "pluginId": "10050",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as \"proxy\" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ",
        "messageId": "1226",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/remoteinclude/object_hash.html",
        "tags": {
          "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttp://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html (obsoleted by rfc7234)",
        "solution": "Validate that the response does not contain sensitive, personal or user-specific information.  If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.",
        "alert": "Retrieved from Cache",
        "param": "",
        "attack": "",
        "name": "Retrieved from Cache",
        "risk": "Informational",
        "id": "1327",
        "alertRef": "10050"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1226",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/remoteinclude/object_hash.html",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "1328",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1228",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/tags?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "1329",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1226",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/remoteinclude/object_hash.html",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "1330",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1229",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/body_comment?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "1331",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1229",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/body_comment?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "1335",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1229",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/body_comment?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "1339",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1229",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/body_comment?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "1342",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1234",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/tags/iframe?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "1351",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1237",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/sessionStorage/function/innerHtml",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "1355",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1237",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/sessionStorage/function/innerHtml",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "1363",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script>\n      if (!sessionStorage.getItem('badValue')) {\n  sessionStorage.setItem('badValue', Math.random());\n}\n\nvar payload = sessionStorage.getItem('badValue'); // Using sync trigger.\n\nsetTimeout(function() {\n  trigger(sessionStorage.getItem('badValue'));\n  // Clean up the sessionStorage to avoid side-effects on subsequent tests.\n  sessionStorage.clear();\n}, 10);\nvar div = document.createElement('div');\ndocument.documentElement.appendChild(div);\n\n// Sync trigger.\ndiv.innerHTML = payload;\n\n// Async trigger.\nfunction trigger(payload) {\n  div.innerHTML = payload;\n};\n\n    </script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1237",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/sessionStorage/function/innerHtml",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "1367",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1237",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/sessionStorage/function/innerHtml",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "1370",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1237",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/sessionStorage/function/innerHtml",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "1373",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1242",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reverseclickjacking/multipage/ParameterInFragment/InCallback/WithoutXFO/",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "1380",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1242",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reverseclickjacking/multipage/ParameterInFragment/InCallback/WithoutXFO/",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "1386",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "The following pattern was used: \\bFROM\\b and was detected in the element starting with: \"<script>\n    var resultDiv = document.getElementById('result');\n\n      /**\n       * Callback function that receives data from th\", see evidence field for the suspicious comment/snippet.",
        "method": "GET",
        "evidence": "from",
        "pluginId": "10027",
        "cweid": "200",
        "confidence": "Low",
        "wascid": "13",
        "description": "The response appears to contain suspicious comments which may help an attacker. Note: Matches made within script blocks or files are against the entire content not only comments.",
        "messageId": "1242",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reverseclickjacking/multipage/ParameterInFragment/InCallback/WithoutXFO/",
        "tags": {
          "OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
          "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html"
        },
        "reference": "",
        "solution": "Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.",
        "alert": "Information Disclosure - Suspicious Comments",
        "param": "",
        "attack": "",
        "name": "Information Disclosure - Suspicious Comments",
        "risk": "Informational",
        "id": "1389",
        "alertRef": "10027"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script>\n    var resultDiv = document.getElementById('result');\n\n      /**\n       * Callback function that receives data from the JSONP callback and\n       * prints a \"stringified\" representation of the response, only for\n       * human debugging.\n       */\n      function callbackFunc(data) {\n        resultDiv.textContent = 'JSONP data received: ' + JSON.stringify(data);\n      }\n\n      try {\n        // Retrieve the \"q\" parameter in the URL fragment\n        var q = decodeURIComponent(new RegExp('[?&#]q=([^&]*)')\n            .exec(location.hash)[1]);\n\n        // Validate it (prevents trivial XSS)\n        var allowedPattern = /^[a-zA-Z0-9\\._&#=]+$/;\n        if (allowedPattern.test(q)) {\n          // The vulnerability arises because of this insecure concatenation\n          var url = '/reverseclickjacking/jsonpendpoint?q=' + q\n              + '&callback=' + q + '';\n\n          /* Create the <script> tag that executes the JS code returned by\n           * the JSONP endpoint. */\n          var s = document.createElement('script');\n          s.type = 'text/javascript';\n          s.src = url;\n          document.body.appendChild(s);\n        }\n      } catch(e) {\n        resultDiv.textContent = 'Please specify a q parameter in the fragment.';\n      }\n  </script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1242",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reverseclickjacking/multipage/ParameterInFragment/InCallback/WithoutXFO/",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "1392",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1242",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reverseclickjacking/multipage/ParameterInFragment/InCallback/WithoutXFO/",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "1393",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1242",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reverseclickjacking/multipage/ParameterInFragment/InCallback/WithoutXFO/",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "1396",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1251",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/sessionStorage/function/documentWrite",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "1406",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "The presence of the 'Age' header indicates that that a HTTP/1.1 compliant caching server is in use.",
        "method": "GET",
        "evidence": "Age: 1",
        "pluginId": "10050",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as \"proxy\" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ",
        "messageId": "1248",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/vulnerablelibraries/jquery.html",
        "tags": {
          "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttp://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html (obsoleted by rfc7234)",
        "solution": "Validate that the response does not contain sensitive, personal or user-specific information.  If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.",
        "alert": "Retrieved from Cache",
        "param": "",
        "attack": "",
        "name": "Retrieved from Cache",
        "risk": "Informational",
        "id": "1409",
        "alertRef": "10050"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1252",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/tags/div/style?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "1410",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1251",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/sessionStorage/function/documentWrite",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "1413",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script>\n      if (!sessionStorage.getItem('badValue')) {\n  sessionStorage.setItem('badValue', Math.random());\n}\n\nvar payload = sessionStorage.getItem('badValue'); // Using sync trigger.\n\nsetTimeout(function() {\n  trigger(sessionStorage.getItem('badValue'));\n  // Clean up the sessionStorage to avoid side-effects on subsequent tests.\n  sessionStorage.clear();\n}, 10);\n// Sync trigger.\ndocument.write(payload);\n\n// Async trigger.\nfunction trigger(payload) {\n  document.write(payload);\n}\n    </script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1251",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/sessionStorage/function/documentWrite",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "1415",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1251",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/sessionStorage/function/documentWrite",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "1416",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1251",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/sessionStorage/function/documentWrite",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "1420",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1257",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/external/sessionStorage/function/eval",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "1430",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1257",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/external/sessionStorage/function/eval",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "1433",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script src=\"/dom/toxicdomscripts/sessionStorage/function/eval\"></script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1257",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/external/sessionStorage/function/eval",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "1437",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1257",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/external/sessionStorage/function/eval",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "1438",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1262",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/remoteinclude/parameter/object/application_x-shockwave-flash?q=https://google.com",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "1440",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1257",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/external/sessionStorage/function/eval",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "1441",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1262",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/remoteinclude/parameter/object/application_x-shockwave-flash?q=https://google.com",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "1442",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1265",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/external/sessionStorage/array/eval",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "1443",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1262",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/remoteinclude/parameter/object/application_x-shockwave-flash?q=https://google.com",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "1444",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1264",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reverseclickjacking/multipage/ParameterInFragment/OtherParameter/WithoutXFO/",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "1445",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:\r\n\r\nhttps://public-firing-range.appspot.com/remoteinclude/parameter/object/application_x-shockwave-flash?q=https://google.com\r\n\r\nappears to include user input in: \r\n\r\na(n) [object] tag [data] attribute \r\n\r\nThe user input found was:\r\nq=https://google.com\r\n\r\nThe user-controlled value was:\r\nhttps://google.com",
        "method": "GET",
        "evidence": "",
        "pluginId": "10031",
        "cweid": "20",
        "confidence": "Low",
        "wascid": "20",
        "description": "This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.",
        "messageId": "1262",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/remoteinclude/parameter/object/application_x-shockwave-flash?q=https://google.com",
        "tags": {
          "OWASP_2021_A03": "https://owasp.org/Top10/A03_2021-Injection/",
          "OWASP_2017_A01": "https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html"
        },
        "reference": "http://websecuritytool.codeplex.com/wikipage?title=Checks#user-controlled-html-attribute",
        "solution": "Validate all input and sanitize output it before writing to any HTML attributes.",
        "alert": "User Controllable HTML Element Attribute (Potential XSS)",
        "param": "q",
        "attack": "",
        "name": "User Controllable HTML Element Attribute (Potential XSS)",
        "risk": "Informational",
        "id": "1446",
        "alertRef": "10031"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1262",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/remoteinclude/parameter/object/application_x-shockwave-flash?q=https://google.com",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "1447",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1270",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/hash/input.formaction",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "1448",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1265",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/external/sessionStorage/array/eval",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "1449",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1264",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reverseclickjacking/multipage/ParameterInFragment/OtherParameter/WithoutXFO/",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "1450",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script src=\"/dom/toxicdomscripts/sessionStorage/array/eval\"></script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1265",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/external/sessionStorage/array/eval",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "1451",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1265",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/external/sessionStorage/array/eval",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "1452",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1265",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/external/sessionStorage/array/eval",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "1453",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "The following pattern was used: \\bFROM\\b and was detected in the element starting with: \"<script>\n    var resultDiv = document.getElementById('result');\n\n      /**\n       * Callback function that receives data from th\", see evidence field for the suspicious comment/snippet.",
        "method": "GET",
        "evidence": "from",
        "pluginId": "10027",
        "cweid": "200",
        "confidence": "Low",
        "wascid": "13",
        "description": "The response appears to contain suspicious comments which may help an attacker. Note: Matches made within script blocks or files are against the entire content not only comments.",
        "messageId": "1264",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reverseclickjacking/multipage/ParameterInFragment/OtherParameter/WithoutXFO/",
        "tags": {
          "OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
          "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html"
        },
        "reference": "",
        "solution": "Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.",
        "alert": "Information Disclosure - Suspicious Comments",
        "param": "",
        "attack": "",
        "name": "Information Disclosure - Suspicious Comments",
        "risk": "Informational",
        "id": "1454",
        "alertRef": "10027"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1270",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/hash/input.formaction",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "1455",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1271",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/sessionStorage/property/documentWrite",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "1456",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script>\n    var resultDiv = document.getElementById('result');\n\n      /**\n       * Callback function that receives data from the JSONP callback and\n       * prints a \"stringified\" representation of the response, only for\n       * human debugging.\n       */\n      function callbackFunc(data) {\n        resultDiv.textContent = 'JSONP data received: ' + JSON.stringify(data);\n      }\n\n      try {\n        // Retrieve the \"q\" parameter in the URL fragment\n        var q = decodeURIComponent(new RegExp('[?&#]q=([^&]*)')\n            .exec(location.hash)[1]);\n\n        // Validate it (prevents trivial XSS)\n        var allowedPattern = /^[a-zA-Z0-9\\._&#=]+$/;\n        if (allowedPattern.test(q)) {\n          // The vulnerability arises because of this insecure concatenation\n          var url = '/reverseclickjacking/jsonpendpoint?q=' + q\n              + '&callback=callbackFunc';\n\n          /* Create the <script> tag that executes the JS code returned by\n           * the JSONP endpoint. */\n          var s = document.createElement('script');\n          s.type = 'text/javascript';\n          s.src = url;\n          document.body.appendChild(s);\n        }\n      } catch(e) {\n        resultDiv.textContent = 'Please specify a q parameter in the fragment.';\n      }\n  </script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1264",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reverseclickjacking/multipage/ParameterInFragment/OtherParameter/WithoutXFO/",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "1457",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1264",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reverseclickjacking/multipage/ParameterInFragment/OtherParameter/WithoutXFO/",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "1458",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1264",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reverseclickjacking/multipage/ParameterInFragment/OtherParameter/WithoutXFO/",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "1459",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script>\n      var payload = document.location.hash.substr(1);\nvar form = document.createElement(\"form\");\nvar input = document.createElement(\"input\");\ninput.formAction = payload;\ninput.type = \"submit\";\ninput.value = \"submit!\";\ndocument.body.appendChild(form);\nform.appendChild(input);\n\n    </script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1270",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/hash/input.formaction",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "1460",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1273",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/postMessage/innerHtml",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "1461",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1270",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/hash/input.formaction",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "1462",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1271",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/sessionStorage/property/documentWrite",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "1463",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1270",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/hash/input.formaction",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "1464",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1273",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/postMessage/innerHtml",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "1465",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script>\n      if (!sessionStorage.badValue) {\n  sessionStorage.badValue = Math.random();\n}\n\nvar payload = sessionStorage.badValue;\n\nsetTimeout(function() {\n  trigger(sessionStorage.badValue); // Using the async trigger.\n\n  // Clean up the sessionStorage to avoid side-effects on subsequent tests.\n  sessionStorage.clear();\n}, 10)\n// Sync trigger.\ndocument.write(payload);\n\n// Async trigger.\nfunction trigger(payload) {\n  document.write(payload);\n}\n    </script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1271",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/sessionStorage/property/documentWrite",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "1466",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1271",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/sessionStorage/property/documentWrite",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "1467",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script>\n      var postMessageHandler = function(msg) {\n  var content = JSON.parse(msg.data);\n  var div = document.createElement('div');\n  div.innerHTML = content.html;\n  document.documentElement.appendChild(div);\n};\n\nwindow.addEventListener('message', postMessageHandler, false);\n\n    </script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1273",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/postMessage/innerHtml",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "1469",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1271",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/sessionStorage/property/documentWrite",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "1470",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1273",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/postMessage/innerHtml",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "1471",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1273",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/postMessage/innerHtml",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "1472",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1276",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/postMessage/eval",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "1473",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1278",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/external/sessionStorage/function/innerHtml",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "1475",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1276",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/postMessage/eval",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "1476",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1280",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/tagname?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "1477",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script>\n      var postMessageHandler = function(msg) {\n  var content = msg.data;\n  var msgObj = eval(content);\n\n  if (msgObj.isActive) {\n    document.write(\"PostMessage arrived!\");\n  }\n}\n\nwindow.addEventListener('message', postMessageHandler, false);\n\n    </script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1276",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/postMessage/eval",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "1478",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1276",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/postMessage/eval",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "1479",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1278",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/external/sessionStorage/function/innerHtml",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "1480",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1280",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/tagname?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "1481",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script src=\"/dom/toxicdomscripts/sessionStorage/function/innerHtml\"></script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1278",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/external/sessionStorage/function/innerHtml",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "1483",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1276",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/postMessage/eval",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "1484",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1278",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/external/sessionStorage/function/innerHtml",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "1485",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<a>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1280",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/tagname?q=a",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "1487",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1280",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/tagname?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "1488",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1278",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/external/sessionStorage/function/innerHtml",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "1489",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1280",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/tagname?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "1491",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1282",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/external/sessionStorage/property/documentWrite",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "1493",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1282",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/external/sessionStorage/property/documentWrite",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "1494",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script src=\"/dom/toxicdomscripts/sessionStorage/property/documentWrite\"></script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1282",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/external/sessionStorage/property/documentWrite",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "1497",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1282",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/external/sessionStorage/property/documentWrite",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "1500",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1282",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/external/sessionStorage/property/documentWrite",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "1505",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1287",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/postMessage/documentWrite",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "1510",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1288",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/external/sessionStorage/function/documentWrite",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "1511",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1288",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/external/sessionStorage/function/documentWrite",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "1513",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1287",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/postMessage/documentWrite",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "1514",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1291",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/encodeUrl/body_comment?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "1515",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script>\n      var postMessageHandler = function(msg) {\n  var content = JSON.parse(msg.data);\n  document.write('<scr' + 'ipt src=\"' + content.url +'\"></scr' + 'ipt>');\n};\n\nwindow.addEventListener('message', postMessageHandler, false);\n\n    </script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1287",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/postMessage/documentWrite",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "1516",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script src=\"/dom/toxicdomscripts/sessionStorage/function/documentWrite\"></script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1288",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/external/sessionStorage/function/documentWrite",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "1517",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1288",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/external/sessionStorage/function/documentWrite",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "1518",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1287",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/postMessage/documentWrite",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "1520",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1288",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/external/sessionStorage/function/documentWrite",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "1521",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1287",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/postMessage/documentWrite",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "1522",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1291",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/encodeUrl/body_comment?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "1523",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1291",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/encodeUrl/body_comment?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "1526",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1291",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/encodeUrl/body_comment?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "1527",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1292",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/hash/window.open",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "1529",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1293",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/attribute_unquoted?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "1530",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1292",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/hash/window.open",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "1531",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1293",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/attribute_unquoted?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "1532",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script>\n      var payload = document.location.hash.substr(1);\nwindow.open(payload);\n\n    </script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1292",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/hash/window.open",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "1533",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1293",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/attribute_unquoted?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "1534",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1294",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/escapeHtml/textarea?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "1536",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1292",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/hash/window.open",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "1537",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1293",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/attribute_unquoted?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "1538",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1292",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/hash/window.open",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "1539",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1294",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/escapeHtml/textarea?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "1541",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1296",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/postMessage/complexMessageDocumentWriteEval",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "1542",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1294",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/escapeHtml/textarea?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "1544",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1294",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/escapeHtml/textarea?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "1546",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1296",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/postMessage/complexMessageDocumentWriteEval",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "1547",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script>\n      const postMessageHandler = function(msg) {\n  let action = msg.data.action;\n  if(action === 'exec') {\n    eval(msg.data.payload);\n  } else if (action === 'addImage') {\n    document.write('<img href='+ msg.data.source + '>');\n  } else if (action === 'addHtml') {\n    document.write(msg.data.html);\n  } else {\n    console.debug('unsupported command');\n  }\n};\n\nwindow.addEventListener('message', postMessageHandler, false);\n\n    </script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1296",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/postMessage/complexMessageDocumentWriteEval",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "1548",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1298",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/hash/iframe.src",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "1549",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1296",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/postMessage/complexMessageDocumentWriteEval",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "1550",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1296",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/postMessage/complexMessageDocumentWriteEval",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "1551",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1298",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/hash/iframe.src",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "1552",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1301",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/postMessage/improperOriginValidationWithRegExp",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "1554",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script>\n      var payload = document.location.hash.substr(1);\nvar iframe = document.createElement(\"iframe\");\niframe.src = payload;\ndocument.body.appendChild(iframe);\n\n    </script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1298",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/hash/iframe.src",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "1555",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1298",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/hash/iframe.src",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "1556",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1298",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/hash/iframe.src",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "1557",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1301",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/postMessage/improperOriginValidationWithRegExp",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "1560",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script>\n      var postMessageHandler = function(msg) {\n  const originRegExp = /https?:\\/\\/www.google.com/\n  if (msg.origin.match(originRegExp)) {\n    eval(msg.data);\n  }\n}\n\nwindow.addEventListener('message', postMessageHandler, false);\n    </script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1301",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/postMessage/improperOriginValidationWithRegExp",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "1564",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1301",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/postMessage/improperOriginValidationWithRegExp",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "1567",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1301",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/postMessage/improperOriginValidationWithRegExp",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "1570",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1304",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/tags/a/href?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "1575",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1306",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/search/area.href?//example.org",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "1576",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1306",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/search/area.href?//example.org",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "1578",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1309",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/eventtriggering/document/formSubmission/innerHtml",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "1579",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script>\n      var payload = document.location.search.substr(1);\nvar area = document.createElement(\"area\");\narea.href = payload;\narea.textContent = \"Here's an area element\";\ndocument.body.appendChild(area);\n\n    </script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1306",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/search/area.href?//example.org",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "1581",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1306",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/search/area.href?//example.org",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "1582",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1306",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/search/area.href?//example.org",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "1583",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1309",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/eventtriggering/document/formSubmission/innerHtml",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "1589",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script>\n      function deferredPayload() {\n  var div = document.createElement('div');\ndocument.documentElement.appendChild(div);\n\n// Sync trigger.\ndiv.innerHTML = payload;\n\n// Async trigger.\nfunction trigger(payload) {\n  div.innerHTML = payload;\n};\n\n}var form = document.createElement('form');\n\nvar input = document.createElement('input');\ninput.setAttribute('id', 'userInput');\n\nvar submit = document.createElement('input');\nsubmit.setAttribute('type', 'submit');\n\nform.setAttribute('action', '#');\nform.appendChild(input);\nform.appendChild(submit);\n\nvar payload = '';\nform.onsubmit = function() {\n  payload = document.getElementById('userInput').value;\n  deferredPayload();\n  return false;\n};\n\ndocument.body.appendChild(form);var div = document.createElement('div');\ndocument.documentElement.appendChild(div);\n\n// Sync trigger.\ndiv.innerHTML = payload;\n\n// Async trigger.\nfunction trigger(payload) {\n  div.innerHTML = payload;\n};\n\n    </script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1309",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/eventtriggering/document/formSubmission/innerHtml",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "1590",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1309",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/eventtriggering/document/formSubmission/innerHtml",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "1592",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1318",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/eventtriggering/document/formSubmission/eval",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "1593",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1309",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/eventtriggering/document/formSubmission/innerHtml",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "1594",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1316",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reverseclickjacking/multipage/ParameterInQuery/InCallback/WithXFO/?q=foo",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "1595",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script src=\n  '/reverseclickjacking/jsonpendpoint?q=&callback=foo'></script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1316",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reverseclickjacking/multipage/ParameterInQuery/InCallback/WithXFO/?q=foo",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "1598",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1318",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/eventtriggering/document/formSubmission/eval",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "1600",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1316",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reverseclickjacking/multipage/ParameterInQuery/InCallback/WithXFO/?q=foo",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "1601",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1316",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reverseclickjacking/multipage/ParameterInQuery/InCallback/WithXFO/?q=foo",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "1603",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script>\n      function deferredPayload() {\n  // Sync trigger.\neval(payload);\n\n// Async trigger.\nfunction trigger(payload) {\n  eval(payload);\n};\n}var form = document.createElement('form');\n\nvar input = document.createElement('input');\ninput.setAttribute('id', 'userInput');\n\nvar submit = document.createElement('input');\nsubmit.setAttribute('type', 'submit');\n\nform.setAttribute('action', '#');\nform.appendChild(input);\nform.appendChild(submit);\n\nvar payload = '';\nform.onsubmit = function() {\n  payload = document.getElementById('userInput').value;\n  deferredPayload();\n  return false;\n};\n\ndocument.body.appendChild(form);// Sync trigger.\neval(payload);\n\n// Async trigger.\nfunction trigger(payload) {\n  eval(payload);\n};\n    </script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1318",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/eventtriggering/document/formSubmission/eval",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "1605",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1318",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/eventtriggering/document/formSubmission/eval",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "1607",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1318",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/eventtriggering/document/formSubmission/eval",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "1609",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1321",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/postMessage/improperOriginValidationWithPartialStringComparison",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "1614",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1323",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/eventtriggering/document/inputTyping/eval",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "1616",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1321",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/postMessage/improperOriginValidationWithPartialStringComparison",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "1618",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1325",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/eventtriggering/document/formSubmission/documentWrite",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "1619",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script>\n      var postMessageHandler = function(msg) {\n  if (msg.origin.includes('www.google.com')) {\n    eval(msg.data);\n  }\n}\n\nwindow.addEventListener('message', postMessageHandler, false);\n    </script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1321",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/postMessage/improperOriginValidationWithPartialStringComparison",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "1622",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1321",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/postMessage/improperOriginValidationWithPartialStringComparison",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "1624",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1325",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/eventtriggering/document/formSubmission/documentWrite",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "1625",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1321",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdom/postMessage/improperOriginValidationWithPartialStringComparison",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "1626",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1323",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/eventtriggering/document/inputTyping/eval",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "1627",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script>\n      function deferredPayload() {\n  // Sync trigger.\ndocument.write(payload);\n\n// Async trigger.\nfunction trigger(payload) {\n  document.write(payload);\n}\n}var form = document.createElement('form');\n\nvar input = document.createElement('input');\ninput.setAttribute('id', 'userInput');\n\nvar submit = document.createElement('input');\nsubmit.setAttribute('type', 'submit');\n\nform.setAttribute('action', '#');\nform.appendChild(input);\nform.appendChild(submit);\n\nvar payload = '';\nform.onsubmit = function() {\n  payload = document.getElementById('userInput').value;\n  deferredPayload();\n  return false;\n};\n\ndocument.body.appendChild(form);// Sync trigger.\ndocument.write(payload);\n\n// Async trigger.\nfunction trigger(payload) {\n  document.write(payload);\n}\n    </script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1325",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/eventtriggering/document/formSubmission/documentWrite",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "1628",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1325",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/eventtriggering/document/formSubmission/documentWrite",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "1629",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1326",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/javascripturi.html",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "1630",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script>\n      function deferredPayload() {\n  // Sync trigger.\neval(payload);\n\n// Async trigger.\nfunction trigger(payload) {\n  eval(payload);\n};\n}// Trigger XSS by waiting for typing events / watch for change on an input field.\n\nvar input = document.createElement('input');\ninput.setAttribute('type', 'text');\n\nvar payload = '';\nfunction xssIt(e) {\n  payload = e.target.value;\n  deferredPayload();\n}\n\ninput.addEventListener('keyup', xssIt);\ninput.addEventListener('change', xssIt);\n\ndocument.body.appendChild(input);// Sync trigger.\neval(payload);\n\n// Async trigger.\nfunction trigger(payload) {\n  eval(payload);\n};\n    </script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1323",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/eventtriggering/document/inputTyping/eval",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "1631",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1325",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/eventtriggering/document/formSubmission/documentWrite",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "1632",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1323",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/eventtriggering/document/inputTyping/eval",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "1633",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1323",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/eventtriggering/document/inputTyping/eval",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "1634",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "public, max-age=600",
        "pluginId": "10015",
        "cweid": "525",
        "confidence": "Low",
        "wascid": "13",
        "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
        "messageId": "1326",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/javascripturi.html",
        "tags": {
          "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/",
        "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
        "alert": "Re-examine Cache-control Directives",
        "param": "Cache-Control",
        "attack": "",
        "name": "Re-examine Cache-control Directives",
        "risk": "Informational",
        "id": "1635",
        "alertRef": "10015"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1326",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/javascripturi.html",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "1636",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "The presence of the 'Age' header indicates that that a HTTP/1.1 compliant caching server is in use.",
        "method": "GET",
        "evidence": "Age: 1",
        "pluginId": "10050",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as \"proxy\" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ",
        "messageId": "1326",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/javascripturi.html",
        "tags": {
          "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttp://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html (obsoleted by rfc7234)",
        "solution": "Validate that the response does not contain sensitive, personal or user-specific information.  If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.",
        "alert": "Retrieved from Cache",
        "param": "",
        "attack": "",
        "name": "Retrieved from Cache",
        "risk": "Informational",
        "id": "1637",
        "alertRef": "10050"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1326",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/javascripturi.html",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "1638",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1326",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/javascripturi.html",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "1639",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1329",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/eventtriggering/document/inputTyping/innerHtml",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "1640",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1327",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reverseclickjacking/multipage/ParameterInQuery/OtherParameter/WithXFO/?q=%26callback%3Dfoo%23",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "1641",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script src=\n  '/reverseclickjacking/jsonpendpoint?q=&callback=foo#&callback=callbackFunc'></script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1327",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reverseclickjacking/multipage/ParameterInQuery/OtherParameter/WithXFO/?q=%26callback%3Dfoo%23",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "1643",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1329",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/eventtriggering/document/inputTyping/innerHtml",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "1644",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1327",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reverseclickjacking/multipage/ParameterInQuery/OtherParameter/WithXFO/?q=%26callback%3Dfoo%23",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "1645",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script>\n      function deferredPayload() {\n  var div = document.createElement('div');\ndocument.documentElement.appendChild(div);\n\n// Sync trigger.\ndiv.innerHTML = payload;\n\n// Async trigger.\nfunction trigger(payload) {\n  div.innerHTML = payload;\n};\n\n}// Trigger XSS by waiting for typing events / watch for change on an input field.\n\nvar input = document.createElement('input');\ninput.setAttribute('type', 'text');\n\nvar payload = '';\nfunction xssIt(e) {\n  payload = e.target.value;\n  deferredPayload();\n}\n\ninput.addEventListener('keyup', xssIt);\ninput.addEventListener('change', xssIt);\n\ndocument.body.appendChild(input);var div = document.createElement('div');\ndocument.documentElement.appendChild(div);\n\n// Sync trigger.\ndiv.innerHTML = payload;\n\n// Async trigger.\nfunction trigger(payload) {\n  div.innerHTML = payload;\n};\n\n    </script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1329",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/eventtriggering/document/inputTyping/innerHtml",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "1647",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1327",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reverseclickjacking/multipage/ParameterInQuery/OtherParameter/WithXFO/?q=%26callback%3Dfoo%23",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "1648",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1329",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/eventtriggering/document/inputTyping/innerHtml",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "1650",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1329",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/eventtriggering/document/inputTyping/innerHtml",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "1652",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "The presence of the 'Age' header indicates that that a HTTP/1.1 compliant caching server is in use.",
        "method": "GET",
        "evidence": "Age: 2",
        "pluginId": "10050",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as \"proxy\" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ",
        "messageId": "1330",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/remoteinclude/script_hash.html",
        "tags": {
          "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttp://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html (obsoleted by rfc7234)",
        "solution": "Validate that the response does not contain sensitive, personal or user-specific information.  If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.",
        "alert": "Retrieved from Cache",
        "param": "",
        "attack": "",
        "name": "Retrieved from Cache",
        "risk": "Informational",
        "id": "1654",
        "alertRef": "10050"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1337",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/dompropagation/",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "1682",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1337",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/dompropagation/",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "1686",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script>\n      // Writing to DOM attribute document.title and \n// reading back propagates the XSS payload.\n\nvar payload = location.hash.substr(1);\nwindow.status = payload;\nvar retrieved_payload = window.status;\neval(retrieved_payload);\n\n    </script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1337",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/dompropagation/",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "1690",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1337",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/dompropagation/",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "1691",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1337",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/dompropagation/",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "1694",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1344",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/tags/a/style?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "1701",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1345",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/attribute_singlequoted?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "1702",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1345",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/attribute_singlequoted?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "1703",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1345",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/attribute_singlequoted?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "1706",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1345",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/attribute_singlequoted?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "1707",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1347",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/encodeUrl/textarea?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "1709",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1347",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/encodeUrl/textarea?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "1714",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1347",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/encodeUrl/textarea?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "1716",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1347",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/encodeUrl/textarea?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "1718",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1350",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/attribute_quoted?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "1722",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1351",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/eventtriggering/document/inputTyping/documentWrite",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "1726",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1350",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/attribute_quoted?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "1729",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1350",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/attribute_quoted?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "1730",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1350",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/attribute_quoted?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "1731",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1351",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/eventtriggering/document/inputTyping/documentWrite",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "1732",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1352",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/search/svg.a?//example.org",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "1733",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script>\n      function deferredPayload() {\n  // Sync trigger.\ndocument.write(payload);\n\n// Async trigger.\nfunction trigger(payload) {\n  document.write(payload);\n}\n}// Trigger XSS by waiting for typing events / watch for change on an input field.\n\nvar input = document.createElement('input');\ninput.setAttribute('type', 'text');\n\nvar payload = '';\nfunction xssIt(e) {\n  payload = e.target.value;\n  deferredPayload();\n}\n\ninput.addEventListener('keyup', xssIt);\ninput.addEventListener('change', xssIt);\n\ndocument.body.appendChild(input);// Sync trigger.\ndocument.write(payload);\n\n// Async trigger.\nfunction trigger(payload) {\n  document.write(payload);\n}\n    </script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1351",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/eventtriggering/document/inputTyping/documentWrite",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "1734",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1351",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/eventtriggering/document/inputTyping/documentWrite",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "1736",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1351",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/eventtriggering/document/inputTyping/documentWrite",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "1737",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1354",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reverseclickjacking/singlepage/ParameterInFragment/InCallback/",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "1738",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1352",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/search/svg.a?//example.org",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "1740",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1354",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reverseclickjacking/singlepage/ParameterInFragment/InCallback/",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "1741",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script>\n      var payload = document.location.search.substr(1);\nvar xmlns = \"http://www.w3.org/2000/svg\";\nvar svgElement = document.createElementNS(xmlns,\"svg\");\nsvgElement.setAttribute(\"width\",500);\nsvgElement.setAttribute(\"height\",500);\nsvgElement.setAttributeNS(\"http://www.w3.org/2000/xmlns/\",\"xmlns:xlink\",\"http://www.w3.org/1999/xlink\");\nvar anchor = document.createElementNS(xmlns,\"a\");\nanchor.setAttributeNS(\"http://www.w3.org/1999/xlink\",\"xlink:href\",payload);\nvar text = document.createElementNS(xmlns,\"text\");\ntext.textContent = \"This is an anchor element!\";\ntext.setAttribute(\"x\",60);\ntext.setAttribute(\"y\",21);\ntext.setAttribute(\"fill\",\"black\");\nanchor.appendChild(text);\nsvgElement.appendChild(anchor);\ndocument.body.appendChild(svgElement);\n\n    </script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1352",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/search/svg.a?//example.org",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "1742",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1356",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/search/button.formaction?//example.org",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "1744",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1352",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/search/svg.a?//example.org",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "1746",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1352",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/search/svg.a?//example.org",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "1748",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "The following pattern was used: \\bFROM\\b and was detected in the element starting with: \"<script>\n    var resultDiv = document.getElementById('result');\n\n      /**\n       * Callback function that receives data from th\", see evidence field for the suspicious comment/snippet.",
        "method": "GET",
        "evidence": "from",
        "pluginId": "10027",
        "cweid": "200",
        "confidence": "Low",
        "wascid": "13",
        "description": "The response appears to contain suspicious comments which may help an attacker. Note: Matches made within script blocks or files are against the entire content not only comments.",
        "messageId": "1354",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reverseclickjacking/singlepage/ParameterInFragment/InCallback/",
        "tags": {
          "OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
          "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html"
        },
        "reference": "",
        "solution": "Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.",
        "alert": "Information Disclosure - Suspicious Comments",
        "param": "",
        "attack": "",
        "name": "Information Disclosure - Suspicious Comments",
        "risk": "Informational",
        "id": "1749",
        "alertRef": "10027"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1356",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/search/button.formaction?//example.org",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "1750",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script>\n    var resultDiv = document.getElementById('result');\n\n      /**\n       * Callback function that receives data from the JSONP callback and\n       * prints a \"stringified\" representation of the response, just for\n       * human debugging.\n       */\n      function callbackFunc(data) {\n        resultDiv.textContent = 'JSONP data received: ' + JSON.stringify(data);\n      }\n\n      try {\n        // Retrieve the \"q\" parameter in the URL fragment\n        var q = decodeURIComponent(new RegExp('[?&#]q=([^&]*)')\n            .exec(location.hash)[1]);\n\n        // Validate it (prevents trivial XSS)\n        var allowedPattern = /^[a-zA-Z0-9\\._&#=]+$/;\n        if (allowedPattern.test(q)) {\n          // The vulnerability arises because of this insecure concatenation\n          var url = '/reverseclickjacking/jsonpendpoint?q=' + q\n              + '&callback=' + q + '';\n\n          /* Create the <script> tag that executes the JS code returned by\n           * the JSONP endpoint. */\n          var s = document.createElement('script');\n          s.type = 'text/javascript';\n          s.src = url;\n          document.body.appendChild(s);\n        }\n      } catch(e) {\n        resultDiv.textContent = 'Please specify a q parameter in the fragment.';\n      }\n  </script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1354",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reverseclickjacking/singlepage/ParameterInFragment/InCallback/",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "1751",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1354",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reverseclickjacking/singlepage/ParameterInFragment/InCallback/",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "1752",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script>\n      var payload = document.location.search.substr(1);\nvar form = document.createElement(\"form\");\nvar button = document.createElement(\"button\");\nbutton.formAction = payload;\nbutton.type = \"submit\";\nbutton.textContent = \"submit!\";\ndocument.body.appendChild(form);\nform.appendChild(button);\n\n    </script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1356",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/search/button.formaction?//example.org",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "1753",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1356",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/search/button.formaction?//example.org",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "1754",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1354",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reverseclickjacking/singlepage/ParameterInFragment/InCallback/",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "1755",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1356",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/search/button.formaction?//example.org",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "1756",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1357",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/tags/script/src?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "1757",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1359",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reverseclickjacking/multipage/ParameterInFragment/InCallback/WithXFO/",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "1760",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "The following pattern was used: \\bFROM\\b and was detected in the element starting with: \"<script>\n    var resultDiv = document.getElementById('result');\n\n      /**\n       * Callback function that receives data from th\", see evidence field for the suspicious comment/snippet.",
        "method": "GET",
        "evidence": "from",
        "pluginId": "10027",
        "cweid": "200",
        "confidence": "Low",
        "wascid": "13",
        "description": "The response appears to contain suspicious comments which may help an attacker. Note: Matches made within script blocks or files are against the entire content not only comments.",
        "messageId": "1359",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reverseclickjacking/multipage/ParameterInFragment/InCallback/WithXFO/",
        "tags": {
          "OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
          "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html"
        },
        "reference": "",
        "solution": "Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.",
        "alert": "Information Disclosure - Suspicious Comments",
        "param": "",
        "attack": "",
        "name": "Information Disclosure - Suspicious Comments",
        "risk": "Informational",
        "id": "1763",
        "alertRef": "10027"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script>\n    var resultDiv = document.getElementById('result');\n\n      /**\n       * Callback function that receives data from the JSONP callback and\n       * prints a \"stringified\" representation of the response, only for\n       * human debugging.\n       */\n      function callbackFunc(data) {\n        resultDiv.textContent = 'JSONP data received: ' + JSON.stringify(data);\n      }\n\n      try {\n        // Retrieve the \"q\" parameter in the URL fragment\n        var q = decodeURIComponent(new RegExp('[?&#]q=([^&]*)')\n            .exec(location.hash)[1]);\n\n        // Validate it (prevents trivial XSS)\n        var allowedPattern = /^[a-zA-Z0-9\\._&#=]+$/;\n        if (allowedPattern.test(q)) {\n          // The vulnerability arises because of this insecure concatenation\n          var url = '/reverseclickjacking/jsonpendpoint?q=' + q\n              + '&callback=' + q + '';\n\n          /* Create the <script> tag that executes the JS code returned by\n           * the JSONP endpoint. */\n          var s = document.createElement('script');\n          s.type = 'text/javascript';\n          s.src = url;\n          document.body.appendChild(s);\n        }\n      } catch(e) {\n        resultDiv.textContent = 'Please specify a q parameter in the fragment.';\n      }\n  </script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1359",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reverseclickjacking/multipage/ParameterInFragment/InCallback/WithXFO/",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "1766",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1359",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reverseclickjacking/multipage/ParameterInFragment/InCallback/WithXFO/",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "1768",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1359",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reverseclickjacking/multipage/ParameterInFragment/InCallback/WithXFO/",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "1773",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "The presence of the 'Age' header indicates that that a HTTP/1.1 compliant caching server is in use.",
        "method": "GET",
        "evidence": "Age: 1",
        "pluginId": "10050",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as \"proxy\" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ",
        "messageId": "1370",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/remoteinclude/object_hash.html",
        "tags": {
          "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttp://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html (obsoleted by rfc7234)",
        "solution": "Validate that the response does not contain sensitive, personal or user-specific information.  If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.",
        "alert": "Retrieved from Cache",
        "param": "",
        "attack": "",
        "name": "Retrieved from Cache",
        "risk": "Informational",
        "id": "1806",
        "alertRef": "10050"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1372",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reverseclickjacking/multipage/ParameterInFragment/OtherParameter/WithXFO/",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "1814",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "The following pattern was used: \\bFROM\\b and was detected in the element starting with: \"<script>\n    var resultDiv = document.getElementById('result');\n\n      /**\n       * Callback function that receives data from th\", see evidence field for the suspicious comment/snippet.",
        "method": "GET",
        "evidence": "from",
        "pluginId": "10027",
        "cweid": "200",
        "confidence": "Low",
        "wascid": "13",
        "description": "The response appears to contain suspicious comments which may help an attacker. Note: Matches made within script blocks or files are against the entire content not only comments.",
        "messageId": "1372",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reverseclickjacking/multipage/ParameterInFragment/OtherParameter/WithXFO/",
        "tags": {
          "OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
          "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html"
        },
        "reference": "",
        "solution": "Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.",
        "alert": "Information Disclosure - Suspicious Comments",
        "param": "",
        "attack": "",
        "name": "Information Disclosure - Suspicious Comments",
        "risk": "Informational",
        "id": "1818",
        "alertRef": "10027"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script>\n    var resultDiv = document.getElementById('result');\n\n      /**\n       * Callback function that receives data from the JSONP callback and\n       * prints a \"stringified\" representation of the response, only for\n       * human debugging.\n       */\n      function callbackFunc(data) {\n        resultDiv.textContent = 'JSONP data received: ' + JSON.stringify(data);\n      }\n\n      try {\n        // Retrieve the \"q\" parameter in the URL fragment\n        var q = decodeURIComponent(new RegExp('[?&#]q=([^&]*)')\n            .exec(location.hash)[1]);\n\n        // Validate it (prevents trivial XSS)\n        var allowedPattern = /^[a-zA-Z0-9\\._&#=]+$/;\n        if (allowedPattern.test(q)) {\n          // The vulnerability arises because of this insecure concatenation\n          var url = '/reverseclickjacking/jsonpendpoint?q=' + q\n              + '&callback=callbackFunc';\n\n          /* Create the <script> tag that executes the JS code returned by\n           * the JSONP endpoint. */\n          var s = document.createElement('script');\n          s.type = 'text/javascript';\n          s.src = url;\n          document.body.appendChild(s);\n        }\n      } catch(e) {\n        resultDiv.textContent = 'Please specify a q parameter in the fragment.';\n      }\n  </script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1372",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reverseclickjacking/multipage/ParameterInFragment/OtherParameter/WithXFO/",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "1821",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1372",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reverseclickjacking/multipage/ParameterInFragment/OtherParameter/WithXFO/",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "1822",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1372",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reverseclickjacking/multipage/ParameterInFragment/OtherParameter/WithXFO/",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "1825",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1382",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/search/location.assign?//example.org",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "1846",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1382",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/search/location.assign?//example.org",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "1851",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script>\n      var payload = document.location.search.substr(1);\nlocation.assign(payload);\n\n    </script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1382",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/search/location.assign?//example.org",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "1854",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1382",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/search/location.assign?//example.org",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "1856",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1382",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/search/location.assign?//example.org",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "1858",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1389",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/tags/expression?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "1869",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1393",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/tags/body/onload?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "1884",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1398",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/tags/multiline?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "1900",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1398",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/tags/multiline?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "1906",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1398",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/tags/multiline?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "1909",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1398",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/tags/multiline?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "1911",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1401",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/escapeHtml/tagname?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "1913",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1401",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/escapeHtml/tagname?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "1918",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<a>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1401",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/escapeHtml/tagname?q=a",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "1919",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1401",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/escapeHtml/tagname?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "1920",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1401",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/escapeHtml/tagname?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "1925",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1431",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/hash/base.href",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "2015",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1432",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/jsonp?callback=%25q",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "2017",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1430",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/encodeUrl/tagname?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "2018",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1432",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/jsonp?callback=%25q",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "2019",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1430",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/encodeUrl/tagname?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "2020",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1431",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/hash/base.href",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "2021",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script>\n      var payload = document.location.hash.substr(1);\nvar baseElement = document.createElement(\"base\");\nbaseElement.href = payload;\ndocument.head.appendChild(baseElement);\n\nvar scriptTag = document.createElement(\"script\");\nscriptTag.src = \"exploit.js\";\ndocument.body.appendChild(scriptTag);\n\n    </script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1431",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/hash/base.href",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "2023",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1433",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/body/401?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "2024",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<a>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1430",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/encodeUrl/tagname?q=a",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "2026",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1431",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/hash/base.href",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "2027",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1430",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/encodeUrl/tagname?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "2029",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1433",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/body/401?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "2030",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1431",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/hash/base.href",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "2031",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1430",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/encodeUrl/tagname?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "2033",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1439",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/body/403?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "2056",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1439",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/body/403?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "2058",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1447",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/attribute_name?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "2082",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1447",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/attribute_name?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "2086",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1447",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/attribute_name?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "2090",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1447",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/attribute_name?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "2094",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1456",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/escapeHtml/attribute_unquoted?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "2116",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1456",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/escapeHtml/attribute_unquoted?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "2120",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1456",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/escapeHtml/attribute_unquoted?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "2125",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1456",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/escapeHtml/attribute_unquoted?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "2128",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1459",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/encodeUrl/attribute_unquoted?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "2132",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1459",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/encodeUrl/attribute_unquoted?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "2138",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1459",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/encodeUrl/attribute_unquoted?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "2143",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1459",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/encodeUrl/attribute_unquoted?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "2145",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "The presence of the 'Age' header indicates that that a HTTP/1.1 compliant caching server is in use.",
        "method": "GET",
        "evidence": "Age: 3",
        "pluginId": "10050",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as \"proxy\" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ",
        "messageId": "1470",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/remoteinclude/script_hash.html",
        "tags": {
          "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttp://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html (obsoleted by rfc7234)",
        "solution": "Validate that the response does not contain sensitive, personal or user-specific information.  If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.",
        "alert": "Retrieved from Cache",
        "param": "",
        "attack": "",
        "name": "Retrieved from Cache",
        "risk": "Informational",
        "id": "2183",
        "alertRef": "10050"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1475",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/pression",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "2201",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1475",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/pression",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "2205",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1476",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/hash/embed.src",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "2211",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1476",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/hash/embed.src",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "2213",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script>\n      var payload = document.location.hash.substr(1);\nvar embedElement = document.createElement(\"embed\");\nembedElement.src = payload;\ndocument.body.appendChild(embedElement);\n\n    </script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1476",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/hash/embed.src",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "2214",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1479",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/body/400?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "2216",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1476",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/hash/embed.src",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "2217",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1476",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/hash/embed.src",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "2219",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1479",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/body/400?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "2223",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1481",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/hash/fetch",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "2230",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1481",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/hash/fetch",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "2235",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script>\n      var payload = document.location.hash.substr(1);\nvar divElement = document.createElement('div');\nvar resourceUri= payload;\nfetch(resourceUri).then(\n  function(response) {\n  \treturn response.text();\n  }).then(function(body) {\n  \tdivElement.innerHTML = body;\n  });\ndocument.body.appendChild(divElement);\n\n    </script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1481",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/hash/fetch",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "2237",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1481",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/hash/fetch",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "2238",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1481",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/hash/fetch",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "2240",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1490",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/escapeHtml/attribute_singlequoted?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "2275",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1490",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/escapeHtml/attribute_singlequoted?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "2280",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1490",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/escapeHtml/attribute_singlequoted?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "2282",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1490",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/escapeHtml/attribute_singlequoted?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "2283",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "HTTP/1.1 500 Internal Server Error",
        "pluginId": "90022",
        "cweid": "200",
        "confidence": "Medium",
        "wascid": "13",
        "description": "This page contains an error/warning message that may disclose sensitive information like the location of the file that produced the unhandled exception. This information can be used to launch further attacks against the web application. The alert could be a false positive if the error message is found inside a documentation page.",
        "messageId": "1500",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/body/500?q=a",
        "tags": {
          "WSTG-v42-ERRH-02": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/08-Testing_for_Error_Handling/02-Testing_for_Stack_Traces",
          "WSTG-v42-ERRH-01": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/08-Testing_for_Error_Handling/01-Testing_For_Improper_Error_Handling",
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "",
        "solution": "Review the source code of this page. Implement custom error pages. Consider implementing a mechanism to provide a unique error reference/identifier to the client (browser) while logging the details on the server side and not exposing them to the user.",
        "alert": "Application Error Disclosure",
        "param": "",
        "attack": "",
        "name": "Application Error Disclosure",
        "risk": "Low",
        "id": "2303",
        "alertRef": "90022"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1500",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/body/500?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "2304",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1500",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/body/500?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "2307",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1502",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/jsonp?callback=callbackFunc&other=%25q",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "2319",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1502",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/jsonp?callback=callbackFunc&other=%25q",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "2322",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1507",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/encodeUrl/attribute_singlequoted?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "2333",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1507",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/encodeUrl/attribute_singlequoted?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "2337",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1507",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/encodeUrl/attribute_singlequoted?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "2339",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "The presence of the 'Age' header indicates that that a HTTP/1.1 compliant caching server is in use.",
        "method": "GET",
        "evidence": "Age: 3",
        "pluginId": "10050",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as \"proxy\" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ",
        "messageId": "1505",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/vulnerablelibraries/jquery.html",
        "tags": {
          "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttp://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html (obsoleted by rfc7234)",
        "solution": "Validate that the response does not contain sensitive, personal or user-specific information.  If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.",
        "alert": "Retrieved from Cache",
        "param": "",
        "attack": "",
        "name": "Retrieved from Cache",
        "risk": "Informational",
        "id": "2341",
        "alertRef": "10050"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1507",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/encodeUrl/attribute_singlequoted?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "2343",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1515",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/search/frame.src?//example.org",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "2361",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1515",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/search/frame.src?//example.org",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "2368",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script>\n      var payload = document.location.search.substr(1);\nvar frame = document.createElement(\"frame\");\nframe.src = payload;\ndocument.body.appendChild(frame);\n\n    </script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1515",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/search/frame.src?//example.org",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "2371",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1515",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/search/frame.src?//example.org",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "2372",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1515",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/search/frame.src?//example.org",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "2375",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "The presence of the 'Age' header indicates that that a HTTP/1.1 compliant caching server is in use.",
        "method": "GET",
        "evidence": "Age: 2",
        "pluginId": "10050",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as \"proxy\" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ",
        "messageId": "1516",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/remoteinclude/object_hash.html",
        "tags": {
          "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttp://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html (obsoleted by rfc7234)",
        "solution": "Validate that the response does not contain sensitive, personal or user-specific information.  If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.",
        "alert": "Retrieved from Cache",
        "param": "",
        "attack": "",
        "name": "Retrieved from Cache",
        "risk": "Informational",
        "id": "2377",
        "alertRef": "10050"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1520",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/script",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "2386",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1520",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/script",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "2390",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1521",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/hash/link.href",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "2391",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1521",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/hash/link.href",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "2392",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script>\n      var payload = document.location.hash.substr(1);\nvar linkElement = document.createElement(\"link\");\nlinkElement.rel = \"import\";\nlinkElement.href = payload;\ndocument.body.appendChild(linkElement);\n    </script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1521",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/hash/link.href",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "2395",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1521",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/hash/link.href",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "2397",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1521",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/hash/link.href",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "2399",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1525",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/hash/object.data",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "2408",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1525",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/hash/object.data",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "2410",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1528",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/body/404?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "2411",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script>\n      var payload = document.location.hash.substr(1);\nvar objectElement = document.createElement(\"object\");\nobjectElement.data = payload;\ndocument.body.appendChild(objectElement);\n\n    </script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1525",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/hash/object.data",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "2412",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1525",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/hash/object.data",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "2413",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1528",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/body/404?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "2414",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1525",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/hash/object.data",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "2416",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1532",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/hash/param.code.value",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "2439",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1532",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/hash/param.code.value",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "2445",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script>\n      var payload = document.location.hash.substr(1);\nvar objectElement = document.createElement(\"object\");\nvar paramTypeElement = document.createElement(\"param\");\nvar paramCodeElement = document.createElement(\"param\");\nvar paramAllowScriptAccessElement = document.createElement(\"param\");\nparamTypeElement.name = \"type\";\nparamTypeElement.value = \"application/x-shockwave-flash\";\nparamAllowScriptAccessElement.name = \"allowScriptAccess\";\nparamAllowScriptAccessElement.value = \"always\";\nparamCodeElement.name = \"code\";\nparamCodeElement.value = payload;\nobjectElement.appendChild(paramAllowScriptAccessElement);\nobjectElement.appendChild(paramTypeElement);\nobjectElement.appendChild(paramCodeElement);\ndocument.body.appendChild(objectElement);\n\n\n    </script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1532",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/hash/param.code.value",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "2449",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1532",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/hash/param.code.value",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "2451",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1532",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/hash/param.code.value",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "2453",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1536",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/encodeUrl/attribute_quoted?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "2455",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1536",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/encodeUrl/attribute_quoted?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "2456",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1536",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/encodeUrl/attribute_quoted?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "2460",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1536",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/encodeUrl/attribute_quoted?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "2467",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1541",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/iframe_attribute_value?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "2471",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1541",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/iframe_attribute_value?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "2478",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1541",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/iframe_attribute_value?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "2486",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1541",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/iframe_attribute_value?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "2488",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1549",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/escapeHtml/attribute_quoted?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "2508",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1549",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/escapeHtml/attribute_quoted?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "2511",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1549",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/escapeHtml/attribute_quoted?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "2513",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1552",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/escapeHtml/css_style?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "2515",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1549",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/escapeHtml/attribute_quoted?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "2516",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1552",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/escapeHtml/css_style?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "2521",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1552",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/escapeHtml/css_style?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "2523",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1552",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/escapeHtml/css_style?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "2525",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1553",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/escapeHtml/attribute_name?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "2526",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1553",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/escapeHtml/attribute_name?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "2528",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1553",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/escapeHtml/attribute_name?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "2531",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1553",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/escapeHtml/attribute_name?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "2532",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1559",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/encodeUrl/css_style?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "2549",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1559",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/encodeUrl/css_style?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "2552",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1559",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/encodeUrl/css_style?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "2556",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1559",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/encodeUrl/css_style?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "2558",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1563",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/hash/param.movie.value",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "2569",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1564",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/iframe_srcdoc?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "2570",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1563",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/hash/param.movie.value",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "2571",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1564",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/iframe_srcdoc?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "2573",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script>\n      var payload = document.location.hash.substr(1);\nvar objectElement = document.createElement(\"object\");\nvar paramTypeElement = document.createElement(\"param\");\nvar paramMovieElement = document.createElement(\"param\");\nvar paramAllowScriptAccessElement = document.createElement(\"param\");\nparamTypeElement.name = \"type\";\nparamTypeElement.value = \"application/x-shockwave-flash\";\nparamAllowScriptAccessElement.name = \"allowScriptAccess\";\nparamAllowScriptAccessElement.value = \"always\";\nparamMovieElement.name = \"movie\";\nparamMovieElement.value = payload;\nobjectElement.appendChild(paramAllowScriptAccessElement);\nobjectElement.appendChild(paramTypeElement);\nobjectElement.appendChild(paramMovieElement);\ndocument.body.appendChild(objectElement);\n\n\n    </script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1563",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/hash/param.movie.value",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "2575",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1563",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/hash/param.movie.value",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "2576",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1564",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/iframe_srcdoc?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "2577",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1565",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/hash/param.src.value",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "2578",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1564",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/iframe_srcdoc?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "2579",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1563",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/hash/param.movie.value",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "2580",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1565",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/hash/param.src.value",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "2581",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script>\n      var payload = document.location.hash.substr(1);\nvar objectElement = document.createElement(\"object\");\nvar paramTypeElement = document.createElement(\"param\");\nvar paramSrcElement = document.createElement(\"param\");\nvar paramAllowScriptAccessElement = document.createElement(\"param\");\nparamTypeElement.name = \"type\";\nparamTypeElement.value = \"application/x-shockwave-flash\";\nparamAllowScriptAccessElement.name = \"allowScriptAccess\";\nparamAllowScriptAccessElement.value = \"always\";\nparamSrcElement.name = \"src\";\nparamSrcElement.value = payload;\nobjectElement.appendChild(paramAllowScriptAccessElement);\nobjectElement.appendChild(paramTypeElement);\nobjectElement.appendChild(paramSrcElement);\ndocument.body.appendChild(objectElement);\n\n\n    </script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1565",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/hash/param.src.value",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "2583",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1565",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/hash/param.src.value",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "2585",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1565",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/hash/param.src.value",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "2588",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1571",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/hash/param.url.value",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "2600",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1571",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/hash/param.url.value",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "2604",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script>\n      var payload = document.location.hash.substr(1);\nvar objectElement = document.createElement(\"object\");\nvar paramTypeElement = document.createElement(\"param\");\nvar paramUrlElement = document.createElement(\"param\");\nvar paramAllowScriptAccessElement = document.createElement(\"param\");\nparamTypeElement.name = \"type\";\nparamTypeElement.value = \"application/x-shockwave-flash\";\nparamAllowScriptAccessElement.name = \"allowScriptAccess\";\nparamAllowScriptAccessElement.value = \"always\";\nparamUrlElement.name = \"url\";\nparamUrlElement.value = payload;\nobjectElement.appendChild(paramAllowScriptAccessElement);\nobjectElement.appendChild(paramTypeElement);\nobjectElement.appendChild(paramUrlElement);\ndocument.body.appendChild(objectElement);\n\n\n    </script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1571",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/hash/param.url.value",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "2606",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1571",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/hash/param.url.value",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "2607",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1571",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/hash/param.url.value",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "2611",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1585",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/textarea?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "2661",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1585",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/textarea?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "2668",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1585",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/textarea?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "2671",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1585",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/textarea?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "2675",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1590",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/textarea_attribute_value?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "2680",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1590",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/textarea_attribute_value?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "2681",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1591",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/encodeUrl/attribute_name?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "2683",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1590",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/textarea_attribute_value?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "2686",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1590",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/textarea_attribute_value?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "2688",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1591",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/encodeUrl/attribute_name?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "2690",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1591",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/encodeUrl/attribute_name?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "2692",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1591",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/encodeUrl/attribute_name?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "2695",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1593",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/encodeUrl/css_style_value?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "2696",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1594",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/escapeHtml/css_style_value?escape=HTML_ESCAPE&q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "2698",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1593",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/encodeUrl/css_style_value?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "2700",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1593",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/encodeUrl/css_style_value?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "2702",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1593",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/encodeUrl/css_style_value?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "2703",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1594",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/escapeHtml/css_style_value?escape=HTML_ESCAPE&q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "2704",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1594",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/escapeHtml/css_style_value?escape=HTML_ESCAPE&q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "2706",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1594",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/escapeHtml/css_style_value?escape=HTML_ESCAPE&q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "2707",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1597",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/noscript?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "2708",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1597",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/noscript?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "2712",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "A noScript tag has been found, which is an indication that the application works differently with JavaScript enabled compared to when it is not.",
        "method": "GET",
        "evidence": "<noscript>a</noscript>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1597",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/noscript?q=a",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "2716",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1597",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/noscript?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "2717",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1597",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/noscript?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "2720",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1605",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/style_attribute_value?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "2741",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1605",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/style_attribute_value?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "2744",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1605",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/style_attribute_value?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "2746",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1608",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/hash/script.href",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "2749",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1605",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/style_attribute_value?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "2750",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1608",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/hash/script.href",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "2753",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script>\n      var payload = document.location.hash.substr(1);\nvar xmlns = \"http://www.w3.org/2000/svg\";\nvar svgElement = document.createElementNS(xmlns,\"svg\");\nsvgElement.setAttributeNS(\n    \"http://www.w3.org/2000/xmlns/\",\n    \"xmlns:xlink\",\n    \"http://www.w3.org/1999/xlink\");\nvar scriptElement = document.createElementNS(xmlns,\"script\");\nscriptElement.setAttributeNS(\n    \"http://www.w3.org/1999/xlink\",\n    \"xlink:href\",\n    location.hash.substr(1));\nsvgElement.appendChild(scriptElement);\ndocument.body.appendChild(svgElement);\n\n    </script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1608",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/hash/script.href",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "2758",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1608",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/hash/script.href",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "2760",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1608",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/hash/script.href",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "2764",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1615",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/hash/script.src",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "2770",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1614",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/hash/xhr.open",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "2772",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1615",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/hash/script.src",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "2776",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1614",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/hash/xhr.open",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "2777",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script>\n      var payload = document.location.hash.substr(1);\nvar scriptElement = document.createElement(\"script\");\nscriptElement.src = payload;\ndocument.body.appendChild(scriptElement);\n\n    </script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1615",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/hash/script.src",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "2779",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script>\n      var payload = document.location.hash.substr(1);\nvar xhttp = new XMLHttpRequest();\nxhttp.open(\"GET\",payload,false);\nxhttp.send();\nvar div = document.createElement(\"div\");\ndiv.innerHTML=xhttp.responseText;\ndocument.body.appendChild(div);\n\n    </script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1614",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/hash/xhr.open",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "2781",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1615",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/hash/script.src",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "2782",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1614",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/hash/xhr.open",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "2783",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1615",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/hash/script.src",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "2784",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1614",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/hash/xhr.open",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "2785",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1630",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/css_style_value?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "2833",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1630",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/css_style_value?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "2835",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1630",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/css_style_value?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "2837",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1630",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/css_style_value?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "2839",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1634",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/hash/script.src.partial_domain",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "2846",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1634",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/hash/script.src.partial_domain",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "2848",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script>\n      var payload = document.location.hash.substr(1);\nvar scriptElement = document.createElement(\"script\");\nscriptElement.src = location.origin + payload + \"/script.js\";\ndocument.body.appendChild(scriptElement);\n\n    </script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1634",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/hash/script.src.partial_domain",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "2852",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1634",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/hash/script.src.partial_domain",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "2854",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1634",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/hash/script.src.partial_domain",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "2855",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1637",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/encodeUrl/css_style_font_value?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "2863",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1637",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/encodeUrl/css_style_font_value?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "2867",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1639",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/css_style_font_value?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "2869",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1637",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/encodeUrl/css_style_font_value?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "2871",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1637",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/encodeUrl/css_style_font_value?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "2872",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1639",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/css_style_font_value?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "2873",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1639",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/css_style_font_value?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "2874",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1639",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/css_style_font_value?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "2876",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1647",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/escapeHtml/js_assignment?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "2899",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1647",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/escapeHtml/js_assignment?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "2903",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script>var foo=a;</script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1647",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/escapeHtml/js_assignment?q=a",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "2906",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1647",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/escapeHtml/js_assignment?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "2907",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1647",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/escapeHtml/js_assignment?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "2908",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1652",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/css_style?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "2912",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1652",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/css_style?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "2917",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1652",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/css_style?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "2920",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1652",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/css_style?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "2922",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1654",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/escapedparameter/js_eventhandler_unquoted/UNQUOTED_ATTRIBUTE?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "2925",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1654",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/escapedparameter/js_eventhandler_unquoted/UNQUOTED_ATTRIBUTE?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "2928",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1654",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/escapedparameter/js_eventhandler_unquoted/UNQUOTED_ATTRIBUTE?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "2931",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "User-controlled javascript event(s) was found. Exploitability will need to be manually determined. The page at the following URL:\r\n\r\nhttps://public-firing-range.appspot.com/reflected/escapedparameter/js_eventhandler_unquoted/UNQUOTED_ATTRIBUTE?q=a\"\r\n\r\nincludes the following Javascript event which may be attacker-controllable: \r\n\r\nUser-input was found in the following data of an [onclick] event:\r\na\r\n\r\nThe user input was:\r\na",
        "method": "GET",
        "evidence": "",
        "pluginId": "10043",
        "cweid": "20",
        "confidence": "Low",
        "wascid": "20",
        "description": "This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.            ",
        "messageId": "1654",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/escapedparameter/js_eventhandler_unquoted/UNQUOTED_ATTRIBUTE?q=a",
        "tags": {
          "OWASP_2021_A03": "https://owasp.org/Top10/A03_2021-Injection/",
          "OWASP_2017_A01": "https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html"
        },
        "reference": "http://websecuritytool.codeplex.com/wikipage?title=Checks#user-javascript-event",
        "solution": "Validate all input and sanitize output it before writing to any Javascript on* events.",
        "alert": "User Controllable JavaScript Event (XSS)",
        "param": "q",
        "attack": "",
        "name": "User Controllable JavaScript Event (XSS)",
        "risk": "Informational",
        "id": "2934",
        "alertRef": "10043"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1654",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/escapedparameter/js_eventhandler_unquoted/UNQUOTED_ATTRIBUTE?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "2937",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1662",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/hash/script.src.partial_query",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "2944",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1662",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/hash/script.src.partial_query",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "2950",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script>\n      var payload = document.location.hash.substr(1);\nvar scriptElement = document.createElement(\"script\");\nscriptElement.src =\nlocation.origin + \"/urldom/jsonp?referrer=\" + payload + \"&callback=helloWorld\";\ndocument.body.appendChild(scriptElement);\nfunction helloWorld(data) {\n  var divElement = document.createElement(\"div\");\n  divElement.textContent = data[\"msg\"];\n  document.body.appendChild(divElement);\n}\n\n    </script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1662",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/hash/script.src.partial_query",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "2954",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1662",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/hash/script.src.partial_query",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "2956",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1662",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/hash/script.src.partial_query",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "2960",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1668",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/escapedparameter/js_eventhandler_quoted/DOUBLE_QUOTED_ATTRIBUTE?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "2966",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1668",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/escapedparameter/js_eventhandler_quoted/DOUBLE_QUOTED_ATTRIBUTE?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "2968",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1668",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/escapedparameter/js_eventhandler_quoted/DOUBLE_QUOTED_ATTRIBUTE?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "2969",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "User-controlled javascript event(s) was found. Exploitability will need to be manually determined. The page at the following URL:\r\n\r\nhttps://public-firing-range.appspot.com/reflected/escapedparameter/js_eventhandler_quoted/DOUBLE_QUOTED_ATTRIBUTE?q=a\"\r\n\r\nincludes the following Javascript event which may be attacker-controllable: \r\n\r\nUser-input was found in the following data of an [onclick] event:\r\na\r\n\r\nThe user input was:\r\na",
        "method": "GET",
        "evidence": "",
        "pluginId": "10043",
        "cweid": "20",
        "confidence": "Low",
        "wascid": "20",
        "description": "This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.            ",
        "messageId": "1668",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/escapedparameter/js_eventhandler_quoted/DOUBLE_QUOTED_ATTRIBUTE?q=a",
        "tags": {
          "OWASP_2021_A03": "https://owasp.org/Top10/A03_2021-Injection/",
          "OWASP_2017_A01": "https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html"
        },
        "reference": "http://websecuritytool.codeplex.com/wikipage?title=Checks#user-javascript-event",
        "solution": "Validate all input and sanitize output it before writing to any Javascript on* events.",
        "alert": "User Controllable JavaScript Event (XSS)",
        "param": "q",
        "attack": "",
        "name": "User Controllable JavaScript Event (XSS)",
        "risk": "Informational",
        "id": "2971",
        "alertRef": "10043"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1668",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/escapedparameter/js_eventhandler_quoted/DOUBLE_QUOTED_ATTRIBUTE?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "2973",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1682",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/escapedparameter/js_eventhandler_singlequoted/SINGLE_QUOTED_ATTRIBUTE?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "3019",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1682",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/escapedparameter/js_eventhandler_singlequoted/SINGLE_QUOTED_ATTRIBUTE?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "3021",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1682",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/escapedparameter/js_eventhandler_singlequoted/SINGLE_QUOTED_ATTRIBUTE?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "3023",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "User-controlled javascript event(s) was found. Exploitability will need to be manually determined. The page at the following URL:\r\n\r\nhttps://public-firing-range.appspot.com/reflected/escapedparameter/js_eventhandler_singlequoted/SINGLE_QUOTED_ATTRIBUTE?q=a\"\r\n\r\nincludes the following Javascript event which may be attacker-controllable: \r\n\r\nUser-input was found in the following data of an [onclick] event:\r\na\r\n\r\nThe user input was:\r\na",
        "method": "GET",
        "evidence": "",
        "pluginId": "10043",
        "cweid": "20",
        "confidence": "Low",
        "wascid": "20",
        "description": "This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.            ",
        "messageId": "1682",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/escapedparameter/js_eventhandler_singlequoted/SINGLE_QUOTED_ATTRIBUTE?q=a",
        "tags": {
          "OWASP_2021_A03": "https://owasp.org/Top10/A03_2021-Injection/",
          "OWASP_2017_A01": "https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html"
        },
        "reference": "http://websecuritytool.codeplex.com/wikipage?title=Checks#user-javascript-event",
        "solution": "Validate all input and sanitize output it before writing to any Javascript on* events.",
        "alert": "User Controllable JavaScript Event (XSS)",
        "param": "q",
        "attack": "",
        "name": "User Controllable JavaScript Event (XSS)",
        "risk": "Informational",
        "id": "3026",
        "alertRef": "10043"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1682",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/escapedparameter/js_eventhandler_singlequoted/SINGLE_QUOTED_ATTRIBUTE?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "3027",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1688",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/encodeUrl/js_assignment?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "3038",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1688",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/encodeUrl/js_assignment?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "3042",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script>var foo=a;</script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1688",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/encodeUrl/js_assignment?q=a",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "3044",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1688",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/encodeUrl/js_assignment?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "3047",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1688",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/encodeUrl/js_assignment?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "3050",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1693",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/js_assignment?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "3058",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1693",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/js_assignment?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "3062",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script>var foo=a;</script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1693",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/js_assignment?q=a",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "3063",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1693",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/js_assignment?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "3064",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1693",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/js_assignment?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "3066",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1698",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/js_eval?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "3071",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1698",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/js_eval?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "3075",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script>eval(\"a\");</script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1698",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/js_eval?q=a",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "3078",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1698",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/js_eval?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "3079",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1698",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/js_eval?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "3081",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1699",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/js_quoted_string?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "3085",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1699",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/js_quoted_string?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "3086",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1700",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/jsonp?callback=foobar",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "3087",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script>var foo=\"a\";</script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1699",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/js_quoted_string?q=a",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "3090",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1700",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/jsonp?callback=foobar",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "3091",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1699",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/js_quoted_string?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "3092",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1699",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/js_quoted_string?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "3093",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1703",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/escapeHtml/js_eval?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "3102",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1703",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/escapeHtml/js_eval?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "3103",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1705",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/escapeHtml/css_style_font_value?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "3104",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script>a;</script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1703",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/escapeHtml/js_eval?q=a",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "3105",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1703",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/escapeHtml/js_eval?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "3106",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1703",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/escapeHtml/js_eval?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "3108",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1705",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/escapeHtml/css_style_font_value?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "3109",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1705",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/escapeHtml/css_style_font_value?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "3112",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1705",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/escapeHtml/css_style_font_value?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "3114",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1712",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/js_singlequoted_string?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "3140",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1712",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/js_singlequoted_string?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "3143",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script>var foo='a';</script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1712",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/js_singlequoted_string?q=a",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "3145",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1712",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/js_singlequoted_string?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "3149",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1712",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/js_singlequoted_string?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "3151",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1723",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/escapeHtml/js_quoted_string?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "3180",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1723",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/escapeHtml/js_quoted_string?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "3185",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script>var foo=\"a\";</script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1723",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/escapeHtml/js_quoted_string?q=a",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "3190",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1723",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/escapeHtml/js_quoted_string?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "3192",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1723",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/escapeHtml/js_quoted_string?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "3194",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1732",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/encodeUrl/js_eval?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "3218",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1732",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/encodeUrl/js_eval?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "3223",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script>a;</script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1732",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/encodeUrl/js_eval?q=a",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "3226",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1732",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/encodeUrl/js_eval?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "3230",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1732",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/encodeUrl/js_eval?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "3233",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1736",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/hash/script.src.partial_path",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "3244",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1737",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/js_slashquoted_string?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "3246",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1736",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/hash/script.src.partial_path",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "3247",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1737",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/js_slashquoted_string?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "3249",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script>var foo=/a/;</script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1737",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/js_slashquoted_string?q=a",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "3250",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script>\n      var payload = document.location.hash.substr(1);\nvar scriptElement = document.createElement(\"script\");\nscriptElement.src = \"/\" + payload;\ndocument.body.appendChild(scriptElement);\n\n    </script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1736",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/hash/script.src.partial_path",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "3251",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1736",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/hash/script.src.partial_path",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "3253",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1737",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/js_slashquoted_string?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "3255",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1736",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/urldom/location/hash/script.src.partial_path",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "3256",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1737",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/js_slashquoted_string?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "3258",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1744",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/url/script_src?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "3275",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1744",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/url/script_src?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "3281",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script src=\"a\"></script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1744",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/url/script_src?q=a",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "3282",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1744",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/url/script_src?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "3283",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1744",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/url/script_src?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "3285",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1752",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/url/object_data?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "3301",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1752",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/url/object_data?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "3306",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1752",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/url/object_data?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "3308",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1753",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/js_comment?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "3309",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1752",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/url/object_data?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "3310",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1753",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/js_comment?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "3312",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script>var foo=1; /* \"a\" */</script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1753",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/js_comment?q=a",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "3315",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1753",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/js_comment?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "3318",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1753",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/js_comment?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "3321",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1757",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/encodeUrl/js_singlequoted_string?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "3322",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1757",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/encodeUrl/js_singlequoted_string?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "3326",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script>var foo='a';</script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1757",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/encodeUrl/js_singlequoted_string?q=a",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "3328",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1757",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/encodeUrl/js_singlequoted_string?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "3329",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1757",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/encodeUrl/js_singlequoted_string?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "3331",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1762",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/encodeUrl/js_quoted_string?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "3344",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1762",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/encodeUrl/js_quoted_string?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "3350",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script>var foo=\"a\";</script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1762",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/encodeUrl/js_quoted_string?q=a",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "3352",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1762",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/encodeUrl/js_quoted_string?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "3354",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1762",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/encodeUrl/js_quoted_string?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "3357",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1764",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/url/object_param?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "3360",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1764",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/url/object_param?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "3362",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1767",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/escapeHtml/js_slashquoted_string?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "3364",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1764",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/url/object_param?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "3365",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1767",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/escapeHtml/js_slashquoted_string?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "3367",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1764",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/url/object_param?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "3369",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script>var foo=/a/;</script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1767",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/escapeHtml/js_slashquoted_string?q=a",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "3371",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1767",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/escapeHtml/js_slashquoted_string?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "3373",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1767",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/escapeHtml/js_slashquoted_string?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "3376",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1768",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/json?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "3379",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1768",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/json?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "3381",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1768",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/json?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "3383",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1768",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/json?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "3384",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1771",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/contentsniffing/json?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "3387",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1771",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/contentsniffing/json?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "3392",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1778",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/escapeHtml/js_comment?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "3417",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1778",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/escapeHtml/js_comment?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "3419",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1779",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/attribute_script?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "3422",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script>var foo=1; /* \"a\" */</script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1778",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/escapeHtml/js_comment?q=a",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "3423",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1778",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/escapeHtml/js_comment?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "3425",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1778",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/escapeHtml/js_comment?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "3426",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1779",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/attribute_script?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "3428",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"http://irrelevant.google.com/a\"/>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "1779",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/attribute_script?q=a",
        "tags": {
          "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "http://irrelevant.google.com/a",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "3430",
        "alertRef": "10017"
      },
      {
        "sourceid": "3",
        "other": "tag=script src=http://irrelevant.google.com/a\n",
        "method": "GET",
        "evidence": "http://irrelevant.google.com/a",
        "pluginId": "10040",
        "cweid": "311",
        "confidence": "Medium",
        "wascid": "4",
        "description": "The page includes mixed content, that is content accessed via HTTP instead of HTTPS.",
        "messageId": "1779",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/attribute_script?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html",
          "WSTG-v42-CRYP-03": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/03-Testing_for_Sensitive_Information_Sent_via_Unencrypted_Channels"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Protection_Cheat_Sheet.html",
        "solution": "A page that is available over SSL/TLS must be comprised completely of content which is transmitted over SSL/TLS.\nThe page must not contain any content that is transmitted over unencrypted HTTP.\n This includes content from third party sites.",
        "alert": "Secure Pages Include Mixed Content (Including Scripts)",
        "param": "",
        "attack": "",
        "name": "Secure Pages Include Mixed Content (Including Scripts)",
        "risk": "Medium",
        "id": "3431",
        "alertRef": "10040"
      },
      {
        "sourceid": "3",
        "other": "The presence of the 'Age' header indicates that that a HTTP/1.1 compliant caching server is in use.",
        "method": "GET",
        "evidence": "Age: 5",
        "pluginId": "10050",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as \"proxy\" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ",
        "messageId": "1780",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/javascripturi.html",
        "tags": {
          "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttp://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html (obsoleted by rfc7234)",
        "solution": "Validate that the response does not contain sensitive, personal or user-specific information.  If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.",
        "alert": "Retrieved from Cache",
        "param": "",
        "attack": "",
        "name": "Retrieved from Cache",
        "risk": "Informational",
        "id": "3432",
        "alertRef": "10050"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script src=\"http://irrelevant.google.com/a\"/>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1779",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/attribute_script?q=a",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "3434",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1779",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/attribute_script?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "3437",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1779",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/attribute_script?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "3439",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1783",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/url/href?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "3446",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1783",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/url/href?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "3450",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1783",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/url/href?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "3453",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1783",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/url/href?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "3454",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1785",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/contentsniffing/plaintext?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "3457",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1787",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/escapeHtml/js_singlequoted_string?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "3460",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1786",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/encodeUrl/js_comment?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "3461",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1786",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/encodeUrl/js_comment?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "3462",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1785",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/contentsniffing/plaintext?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "3463",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script>var foo=1; /* \"a\" */</script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1786",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/encodeUrl/js_comment?q=a",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "3464",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1786",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/encodeUrl/js_comment?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "3465",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1787",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/escapeHtml/js_singlequoted_string?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "3467",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script>var foo='a';</script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1787",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/escapeHtml/js_singlequoted_string?q=a",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "3468",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1787",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/escapeHtml/js_singlequoted_string?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "3469",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1787",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/escapeHtml/js_singlequoted_string?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "3470",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1789",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/jsoncallback",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "3471",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1786",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/encodeUrl/js_comment?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "3473",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1789",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/jsoncallback",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "3474",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1793",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/url/css_import?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "3484",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1794",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/url/css_import?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "3491",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1794",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/url/css_import?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "3495",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1794",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/url/css_import?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "3499",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1800",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/escapeHtml/attribute_script?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "3506",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1798",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/encodeUrl/attribute_script?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "3508",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1798",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/encodeUrl/attribute_script?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "3509",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"http://irrelevant.google.com?a\"/>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "1798",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/encodeUrl/attribute_script?q=a",
        "tags": {
          "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "http://irrelevant.google.com?a",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "3512",
        "alertRef": "10017"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1800",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/escapeHtml/attribute_script?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "3513",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "tag=script src=http://irrelevant.google.com?a\n",
        "method": "GET",
        "evidence": "http://irrelevant.google.com?a",
        "pluginId": "10040",
        "cweid": "311",
        "confidence": "Medium",
        "wascid": "4",
        "description": "The page includes mixed content, that is content accessed via HTTP instead of HTTPS.",
        "messageId": "1798",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/encodeUrl/attribute_script?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html",
          "WSTG-v42-CRYP-03": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/03-Testing_for_Sensitive_Information_Sent_via_Unencrypted_Channels"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Protection_Cheat_Sheet.html",
        "solution": "A page that is available over SSL/TLS must be comprised completely of content which is transmitted over SSL/TLS.\nThe page must not contain any content that is transmitted over unencrypted HTTP.\n This includes content from third party sites.",
        "alert": "Secure Pages Include Mixed Content (Including Scripts)",
        "param": "",
        "attack": "",
        "name": "Secure Pages Include Mixed Content (Including Scripts)",
        "risk": "Medium",
        "id": "3514",
        "alertRef": "10040"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script src=\"http://irrelevant.google.com?a\"/>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1798",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/encodeUrl/attribute_script?q=a",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "3515",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"http://irrelevant.google.com?a\"/>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "1800",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/escapeHtml/attribute_script?q=a",
        "tags": {
          "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "http://irrelevant.google.com?a",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "3517",
        "alertRef": "10017"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1798",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/encodeUrl/attribute_script?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "3518",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "tag=script src=http://irrelevant.google.com?a\n",
        "method": "GET",
        "evidence": "http://irrelevant.google.com?a",
        "pluginId": "10040",
        "cweid": "311",
        "confidence": "Medium",
        "wascid": "4",
        "description": "The page includes mixed content, that is content accessed via HTTP instead of HTTPS.",
        "messageId": "1800",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/escapeHtml/attribute_script?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html",
          "WSTG-v42-CRYP-03": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/03-Testing_for_Sensitive_Information_Sent_via_Unencrypted_Channels"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Protection_Cheat_Sheet.html",
        "solution": "A page that is available over SSL/TLS must be comprised completely of content which is transmitted over SSL/TLS.\nThe page must not contain any content that is transmitted over unencrypted HTTP.\n This includes content from third party sites.",
        "alert": "Secure Pages Include Mixed Content (Including Scripts)",
        "param": "",
        "attack": "",
        "name": "Secure Pages Include Mixed Content (Including Scripts)",
        "risk": "Medium",
        "id": "3520",
        "alertRef": "10040"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1798",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/encodeUrl/attribute_script?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "3521",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script src=\"http://irrelevant.google.com?a\"/>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1800",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/escapeHtml/attribute_script?q=a",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "3523",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1800",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/escapeHtml/attribute_script?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "3526",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1800",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/escapeHtml/attribute_script?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "3527",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1801",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/escapeHtml/href?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "3529",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1803",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/form",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "3531",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1803",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/form",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "3538",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"q\" ].",
        "method": "GET",
        "evidence": "<form method=\"POST\">",
        "pluginId": "10202",
        "cweid": "352",
        "confidence": "Low",
        "wascid": "9",
        "description": "No Anti-CSRF tokens were found in a HTML submission form.\nA cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.\n\nCSRF attacks are effective in a number of situations, including:\n    * The victim has an active session on the target site.\n    * The victim is authenticated via HTTP auth on the target site.\n    * The victim is on the same local network as the target site.\n\nCSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy.",
        "messageId": "1803",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/form",
        "tags": {
          "OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
          "WSTG-v42-SESS-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/05-Testing_for_Cross_Site_Request_Forgery",
          "OWASP_2017_A05": "https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html"
        },
        "reference": "http://projects.webappsec.org/Cross-Site-Request-Forgery\nhttp://cwe.mitre.org/data/definitions/352.html",
        "solution": "Phase: Architecture and Design\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nFor example, use anti-CSRF packages such as the OWASP CSRFGuard.\n\nPhase: Implementation\nEnsure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script.\n\nPhase: Architecture and Design\nGenerate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330).\nNote that this can be bypassed using XSS.\n\nIdentify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.\nNote that this can be bypassed using XSS.\n\nUse the ESAPI Session Management control.\nThis control includes a component for CSRF.\n\nDo not use the GET method for any request that triggers a state change.\n\nPhase: Implementation\nCheck the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.",
        "alert": "Absence of Anti-CSRF Tokens",
        "param": "",
        "attack": "",
        "name": "Absence of Anti-CSRF Tokens",
        "risk": "Medium",
        "id": "3542",
        "alertRef": "10202"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1803",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/form",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "3545",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1803",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/form",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "3547",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1807",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/filteredcharsets/body/SpaceDoubleQuoteSlashEquals?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "3548",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1807",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/filteredcharsets/body/SpaceDoubleQuoteSlashEquals?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "3550",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1807",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/filteredcharsets/body/SpaceDoubleQuoteSlashEquals?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "3554",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1807",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/filteredcharsets/body/SpaceDoubleQuoteSlashEquals?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "3557",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1817",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/encodeUrl/href?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "3576",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1815",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/escapeHtml/css_import?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "3577",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1815",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/escapeHtml/css_import?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "3580",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1815",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/escapeHtml/css_import?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "3582",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1815",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/escapeHtml/css_import?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "3583",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1819",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/filteredcharsets/attribute_unquoted/DoubleQuoteSinglequote?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "3585",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1819",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/filteredcharsets/attribute_unquoted/DoubleQuoteSinglequote?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "3586",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1821",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/encodeUrl/css_import?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "3588",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1819",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/filteredcharsets/attribute_unquoted/DoubleQuoteSinglequote?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "3590",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1819",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/filteredcharsets/attribute_unquoted/DoubleQuoteSinglequote?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "3592",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1821",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/encodeUrl/css_import?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "3594",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1821",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/encodeUrl/css_import?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "3596",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1821",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/encodeUrl/css_import?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "3597",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1824",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/encodeUrl/js_slashquoted_string?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "3601",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1824",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/encodeUrl/js_slashquoted_string?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "3604",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script>var foo=/a/;</script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1824",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/encodeUrl/js_slashquoted_string?q=a",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "3606",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1824",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/encodeUrl/js_slashquoted_string?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "3608",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1824",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/encodeUrl/js_slashquoted_string?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "3610",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1828",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/filteredstrings/body/caseSensitive/script?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "3614",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1828",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/filteredstrings/body/caseSensitive/script?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "3616",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1828",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/filteredstrings/body/caseSensitive/script?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "3619",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1828",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/filteredstrings/body/caseSensitive/script?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "3620",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1835",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/js/escape?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "3628",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1835",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/js/escape?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "3634",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script>\n      eval(escape('a'));\n    </script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1835",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/js/escape?q=a",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "3637",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1835",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/js/escape?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "3639",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1835",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/js/escape?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "3642",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "ALLOW-FROM https://example.com",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "An X-Frame-Options header was present in the response but the value was not correctly set.",
        "messageId": "1848",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/invalidframingconfig/xfoallowfromnoframeancestors",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://tools.ietf.org/html/rfc7034#section-2.1",
        "solution": "Ensure a valid setting is used on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY.  Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "X-Frame-Options Setting Malformed",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "X-Frame-Options Setting Malformed",
        "risk": "Medium",
        "id": "3674",
        "alertRef": "10020-4"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1848",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/invalidframingconfig/xfoallowfromnoframeancestors",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "3676",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1848",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/invalidframingconfig/xfoallowfromnoframeancestors",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "3678",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1848",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/invalidframingconfig/xfoallowfromnoframeancestors",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "3681",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: \nscript-src, style-src, img-src, connect-src, frame-src, font-src, media-src, object-src, manifest-src, worker-src, prefetch-src, form-action\n\nThe directive(s): form-action are among the directives that do not fallback to default-src, missing/excluding them is the same as allowing anything.",
        "method": "GET",
        "evidence": "frame-ancestors https://google.com",
        "pluginId": "10055",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1844",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/invalidframingconfig/xfoallowfromnocoverdomain",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://www.w3.org/TR/CSP2/\nhttp://www.w3.org/TR/CSP/\nhttp://caniuse.com/#search=content+security+policy\nhttp://content-security-policy.com/\nhttps://github.com/shapesecurity/salvation\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources",
        "solution": "Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.",
        "alert": "CSP: Wildcard Directive",
        "param": "Content-Security-Policy",
        "attack": "",
        "name": "CSP: Wildcard Directive",
        "risk": "Medium",
        "id": "3682",
        "alertRef": "10055-4"
      },
      {
        "sourceid": "3",
        "other": "script-src includes unsafe-inline.",
        "method": "GET",
        "evidence": "frame-ancestors https://google.com",
        "pluginId": "10055",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1844",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/invalidframingconfig/xfoallowfromnocoverdomain",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://www.w3.org/TR/CSP2/\nhttp://www.w3.org/TR/CSP/\nhttp://caniuse.com/#search=content+security+policy\nhttp://content-security-policy.com/\nhttps://github.com/shapesecurity/salvation\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources",
        "solution": "Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.",
        "alert": "CSP: script-src unsafe-inline",
        "param": "Content-Security-Policy",
        "attack": "",
        "name": "CSP: script-src unsafe-inline",
        "risk": "Medium",
        "id": "3685",
        "alertRef": "10055-5"
      },
      {
        "sourceid": "3",
        "other": "style-src includes unsafe-inline.",
        "method": "GET",
        "evidence": "frame-ancestors https://google.com",
        "pluginId": "10055",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1844",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/invalidframingconfig/xfoallowfromnocoverdomain",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://www.w3.org/TR/CSP2/\nhttp://www.w3.org/TR/CSP/\nhttp://caniuse.com/#search=content+security+policy\nhttp://content-security-policy.com/\nhttps://github.com/shapesecurity/salvation\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources",
        "solution": "Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.",
        "alert": "CSP: style-src unsafe-inline",
        "param": "Content-Security-Policy",
        "attack": "",
        "name": "CSP: style-src unsafe-inline",
        "risk": "Medium",
        "id": "3686",
        "alertRef": "10055-6"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1844",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/invalidframingconfig/xfoallowfromnocoverdomain",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "3687",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1844",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/invalidframingconfig/xfoallowfromnocoverdomain",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "3688",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1850",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/filteredstrings/body/caseInsensitive/script?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "3689",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1850",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/filteredstrings/body/caseInsensitive/script?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "3692",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1850",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/filteredstrings/body/caseInsensitive/script?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "3697",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1850",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/filteredstrings/body/caseInsensitive/script?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "3700",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1860",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/js/encodeURIComponent?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "3724",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1860",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/js/encodeURIComponent?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "3728",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script>\n      eval(encodeURIComponent('a'));\n    </script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1860",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/js/encodeURIComponent?q=a",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "3729",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1860",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/js/encodeURIComponent?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "3730",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1860",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/js/encodeURIComponent?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "3731",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: \nscript-src, style-src, img-src, connect-src, frame-src, font-src, media-src, object-src, manifest-src, worker-src, prefetch-src, form-action\n\nThe directive(s): form-action are among the directives that do not fallback to default-src, missing/excluding them is the same as allowing anything.",
        "method": "GET",
        "evidence": "frame-ancestors https://example.com",
        "pluginId": "10055",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1862",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/invalidframingconfig/frameancestorsnoxfoallowfrom",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://www.w3.org/TR/CSP2/\nhttp://www.w3.org/TR/CSP/\nhttp://caniuse.com/#search=content+security+policy\nhttp://content-security-policy.com/\nhttps://github.com/shapesecurity/salvation\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources",
        "solution": "Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.",
        "alert": "CSP: Wildcard Directive",
        "param": "Content-Security-Policy",
        "attack": "",
        "name": "CSP: Wildcard Directive",
        "risk": "Medium",
        "id": "3735",
        "alertRef": "10055-4"
      },
      {
        "sourceid": "3",
        "other": "script-src includes unsafe-inline.",
        "method": "GET",
        "evidence": "frame-ancestors https://example.com",
        "pluginId": "10055",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1862",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/invalidframingconfig/frameancestorsnoxfoallowfrom",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://www.w3.org/TR/CSP2/\nhttp://www.w3.org/TR/CSP/\nhttp://caniuse.com/#search=content+security+policy\nhttp://content-security-policy.com/\nhttps://github.com/shapesecurity/salvation\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources",
        "solution": "Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.",
        "alert": "CSP: script-src unsafe-inline",
        "param": "Content-Security-Policy",
        "attack": "",
        "name": "CSP: script-src unsafe-inline",
        "risk": "Medium",
        "id": "3736",
        "alertRef": "10055-5"
      },
      {
        "sourceid": "3",
        "other": "style-src includes unsafe-inline.",
        "method": "GET",
        "evidence": "frame-ancestors https://example.com",
        "pluginId": "10055",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1862",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/invalidframingconfig/frameancestorsnoxfoallowfrom",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://www.w3.org/TR/CSP2/\nhttp://www.w3.org/TR/CSP/\nhttp://caniuse.com/#search=content+security+policy\nhttp://content-security-policy.com/\nhttps://github.com/shapesecurity/salvation\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources",
        "solution": "Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.",
        "alert": "CSP: style-src unsafe-inline",
        "param": "Content-Security-Policy",
        "attack": "",
        "name": "CSP: style-src unsafe-inline",
        "risk": "Medium",
        "id": "3738",
        "alertRef": "10055-6"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1862",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/invalidframingconfig/frameancestorsnoxfoallowfrom",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "3742",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1862",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/invalidframingconfig/frameancestorsnoxfoallowfrom",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "3744",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1870",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/js/html_escape?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "3767",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: \nscript-src, style-src, img-src, connect-src, frame-src, font-src, media-src, object-src, manifest-src, worker-src, prefetch-src, form-action\n\nThe directive(s): form-action are among the directives that do not fallback to default-src, missing/excluding them is the same as allowing anything.",
        "method": "GET",
        "evidence": "frame-ancestors 'self'",
        "pluginId": "10055",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1871",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/invalidframingconfig/frameancestorsselfnoxfosameorigin",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://www.w3.org/TR/CSP2/\nhttp://www.w3.org/TR/CSP/\nhttp://caniuse.com/#search=content+security+policy\nhttp://content-security-policy.com/\nhttps://github.com/shapesecurity/salvation\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources",
        "solution": "Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.",
        "alert": "CSP: Wildcard Directive",
        "param": "Content-Security-Policy",
        "attack": "",
        "name": "CSP: Wildcard Directive",
        "risk": "Medium",
        "id": "3769",
        "alertRef": "10055-4"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1870",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/js/html_escape?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "3770",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "script-src includes unsafe-inline.",
        "method": "GET",
        "evidence": "frame-ancestors 'self'",
        "pluginId": "10055",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1871",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/invalidframingconfig/frameancestorsselfnoxfosameorigin",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://www.w3.org/TR/CSP2/\nhttp://www.w3.org/TR/CSP/\nhttp://caniuse.com/#search=content+security+policy\nhttp://content-security-policy.com/\nhttps://github.com/shapesecurity/salvation\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources",
        "solution": "Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.",
        "alert": "CSP: script-src unsafe-inline",
        "param": "Content-Security-Policy",
        "attack": "",
        "name": "CSP: script-src unsafe-inline",
        "risk": "Medium",
        "id": "3773",
        "alertRef": "10055-5"
      },
      {
        "sourceid": "3",
        "other": "style-src includes unsafe-inline.",
        "method": "GET",
        "evidence": "frame-ancestors 'self'",
        "pluginId": "10055",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1871",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/invalidframingconfig/frameancestorsselfnoxfosameorigin",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://www.w3.org/TR/CSP2/\nhttp://www.w3.org/TR/CSP/\nhttp://caniuse.com/#search=content+security+policy\nhttp://content-security-policy.com/\nhttps://github.com/shapesecurity/salvation\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources",
        "solution": "Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.",
        "alert": "CSP: style-src unsafe-inline",
        "param": "Content-Security-Policy",
        "attack": "",
        "name": "CSP: style-src unsafe-inline",
        "risk": "Medium",
        "id": "3775",
        "alertRef": "10055-6"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script>eval('a'.replace(/</g, '&lt;')\n                              .replace(/&/g, '&amp;')\n                              .replace(/>/g, '&gt;'));\n    </script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1870",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/js/html_escape?q=a",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "3776",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1871",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/invalidframingconfig/frameancestorsselfnoxfosameorigin",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "3778",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1870",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/js/html_escape?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "3780",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1871",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/invalidframingconfig/frameancestorsselfnoxfosameorigin",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "3782",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1870",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/js/html_escape?q=a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "3783",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: \nscript-src, style-src, img-src, connect-src, frame-src, font-src, media-src, object-src, manifest-src, worker-src, prefetch-src, form-action\n\nThe directive(s): form-action are among the directives that do not fallback to default-src, missing/excluding them is the same as allowing anything.",
        "method": "GET",
        "evidence": "frame-ancestors 'self'",
        "pluginId": "10055",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1873",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/invalidframingconfig/xfodenynoframeancestorsnone",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://www.w3.org/TR/CSP2/\nhttp://www.w3.org/TR/CSP/\nhttp://caniuse.com/#search=content+security+policy\nhttp://content-security-policy.com/\nhttps://github.com/shapesecurity/salvation\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources",
        "solution": "Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.",
        "alert": "CSP: Wildcard Directive",
        "param": "Content-Security-Policy",
        "attack": "",
        "name": "CSP: Wildcard Directive",
        "risk": "Medium",
        "id": "3787",
        "alertRef": "10055-4"
      },
      {
        "sourceid": "3",
        "other": "script-src includes unsafe-inline.",
        "method": "GET",
        "evidence": "frame-ancestors 'self'",
        "pluginId": "10055",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1873",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/invalidframingconfig/xfodenynoframeancestorsnone",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://www.w3.org/TR/CSP2/\nhttp://www.w3.org/TR/CSP/\nhttp://caniuse.com/#search=content+security+policy\nhttp://content-security-policy.com/\nhttps://github.com/shapesecurity/salvation\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources",
        "solution": "Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.",
        "alert": "CSP: script-src unsafe-inline",
        "param": "Content-Security-Policy",
        "attack": "",
        "name": "CSP: script-src unsafe-inline",
        "risk": "Medium",
        "id": "3788",
        "alertRef": "10055-5"
      },
      {
        "sourceid": "3",
        "other": "style-src includes unsafe-inline.",
        "method": "GET",
        "evidence": "frame-ancestors 'self'",
        "pluginId": "10055",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1873",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/invalidframingconfig/xfodenynoframeancestorsnone",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://www.w3.org/TR/CSP2/\nhttp://www.w3.org/TR/CSP/\nhttp://caniuse.com/#search=content+security+policy\nhttp://content-security-policy.com/\nhttps://github.com/shapesecurity/salvation\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources",
        "solution": "Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.",
        "alert": "CSP: style-src unsafe-inline",
        "param": "Content-Security-Policy",
        "attack": "",
        "name": "CSP: style-src unsafe-inline",
        "risk": "Medium",
        "id": "3789",
        "alertRef": "10055-6"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1873",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/invalidframingconfig/xfodenynoframeancestorsnone",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "3790",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1873",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/invalidframingconfig/xfodenynoframeancestorsnone",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "3792",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: \nscript-src, style-src, img-src, connect-src, frame-src, font-src, media-src, object-src, manifest-src, worker-src, prefetch-src, form-action\n\nThe directive(s): form-action are among the directives that do not fallback to default-src, missing/excluding them is the same as allowing anything.",
        "method": "GET",
        "evidence": "frame-ancestors 'none'",
        "pluginId": "10055",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1875",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/invalidframingconfig/frameancestorsnonenoxfodeny",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://www.w3.org/TR/CSP2/\nhttp://www.w3.org/TR/CSP/\nhttp://caniuse.com/#search=content+security+policy\nhttp://content-security-policy.com/\nhttps://github.com/shapesecurity/salvation\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources",
        "solution": "Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.",
        "alert": "CSP: Wildcard Directive",
        "param": "Content-Security-Policy",
        "attack": "",
        "name": "CSP: Wildcard Directive",
        "risk": "Medium",
        "id": "3793",
        "alertRef": "10055-4"
      },
      {
        "sourceid": "3",
        "other": "script-src includes unsafe-inline.",
        "method": "GET",
        "evidence": "frame-ancestors 'none'",
        "pluginId": "10055",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1875",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/invalidframingconfig/frameancestorsnonenoxfodeny",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://www.w3.org/TR/CSP2/\nhttp://www.w3.org/TR/CSP/\nhttp://caniuse.com/#search=content+security+policy\nhttp://content-security-policy.com/\nhttps://github.com/shapesecurity/salvation\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources",
        "solution": "Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.",
        "alert": "CSP: script-src unsafe-inline",
        "param": "Content-Security-Policy",
        "attack": "",
        "name": "CSP: script-src unsafe-inline",
        "risk": "Medium",
        "id": "3798",
        "alertRef": "10055-5"
      },
      {
        "sourceid": "3",
        "other": "style-src includes unsafe-inline.",
        "method": "GET",
        "evidence": "frame-ancestors 'none'",
        "pluginId": "10055",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1875",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/invalidframingconfig/frameancestorsnonenoxfodeny",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://www.w3.org/TR/CSP2/\nhttp://www.w3.org/TR/CSP/\nhttp://caniuse.com/#search=content+security+policy\nhttp://content-security-policy.com/\nhttps://github.com/shapesecurity/salvation\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources",
        "solution": "Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.",
        "alert": "CSP: style-src unsafe-inline",
        "param": "Content-Security-Policy",
        "attack": "",
        "name": "CSP: style-src unsafe-inline",
        "risk": "Medium",
        "id": "3800",
        "alertRef": "10055-6"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1875",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/invalidframingconfig/frameancestorsnonenoxfodeny",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "3803",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1875",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/invalidframingconfig/frameancestorsnonenoxfodeny",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "3807",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1880",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "3812",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "public, max-age=600",
        "pluginId": "10015",
        "cweid": "525",
        "confidence": "Low",
        "wascid": "13",
        "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
        "messageId": "1880",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/",
        "tags": {
          "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/",
        "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
        "alert": "Re-examine Cache-control Directives",
        "param": "Cache-Control",
        "attack": "",
        "name": "Re-examine Cache-control Directives",
        "risk": "Informational",
        "id": "3818",
        "alertRef": "10015"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1880",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "3819",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1883",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/div",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "3822",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1883",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/div",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "3824",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "The presence of the 'Age' header indicates that that a HTTP/1.1 compliant caching server is in use.",
        "method": "GET",
        "evidence": "Age: 8",
        "pluginId": "10050",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as \"proxy\" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ",
        "messageId": "1880",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/",
        "tags": {
          "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttp://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html (obsoleted by rfc7234)",
        "solution": "Validate that the response does not contain sensitive, personal or user-specific information.  If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.",
        "alert": "Retrieved from Cache",
        "param": "",
        "attack": "",
        "name": "Retrieved from Cache",
        "risk": "Informational",
        "id": "3825",
        "alertRef": "10050"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1884",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/*",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "3826",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1880",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "3827",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1884",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/*",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "3828",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1880",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "3829",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: \nscript-src, style-src, img-src, connect-src, frame-src, font-src, media-src, object-src, manifest-src, worker-src, prefetch-src, form-action\n\nThe directive(s): form-action are among the directives that do not fallback to default-src, missing/excluding them is the same as allowing anything.",
        "method": "GET",
        "evidence": "frame-ancestors https://google.com",
        "pluginId": "10055",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1885",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/invalidframingconfig/xfosameoriginnoframeancestorsself",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://www.w3.org/TR/CSP2/\nhttp://www.w3.org/TR/CSP/\nhttp://caniuse.com/#search=content+security+policy\nhttp://content-security-policy.com/\nhttps://github.com/shapesecurity/salvation\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources",
        "solution": "Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.",
        "alert": "CSP: Wildcard Directive",
        "param": "Content-Security-Policy",
        "attack": "",
        "name": "CSP: Wildcard Directive",
        "risk": "Medium",
        "id": "3830",
        "alertRef": "10055-4"
      },
      {
        "sourceid": "3",
        "other": "script-src includes unsafe-inline.",
        "method": "GET",
        "evidence": "frame-ancestors https://google.com",
        "pluginId": "10055",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1885",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/invalidframingconfig/xfosameoriginnoframeancestorsself",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://www.w3.org/TR/CSP2/\nhttp://www.w3.org/TR/CSP/\nhttp://caniuse.com/#search=content+security+policy\nhttp://content-security-policy.com/\nhttps://github.com/shapesecurity/salvation\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources",
        "solution": "Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.",
        "alert": "CSP: script-src unsafe-inline",
        "param": "Content-Security-Policy",
        "attack": "",
        "name": "CSP: script-src unsafe-inline",
        "risk": "Medium",
        "id": "3831",
        "alertRef": "10055-5"
      },
      {
        "sourceid": "3",
        "other": "style-src includes unsafe-inline.",
        "method": "GET",
        "evidence": "frame-ancestors https://google.com",
        "pluginId": "10055",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1885",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/invalidframingconfig/xfosameoriginnoframeancestorsself",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://www.w3.org/TR/CSP2/\nhttp://www.w3.org/TR/CSP/\nhttp://caniuse.com/#search=content+security+policy\nhttp://content-security-policy.com/\nhttps://github.com/shapesecurity/salvation\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources",
        "solution": "Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.",
        "alert": "CSP: style-src unsafe-inline",
        "param": "Content-Security-Policy",
        "attack": "",
        "name": "CSP: style-src unsafe-inline",
        "risk": "Medium",
        "id": "3832",
        "alertRef": "10055-6"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1885",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/invalidframingconfig/xfosameoriginnoframeancestorsself",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "3834",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1885",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/invalidframingconfig/xfosameoriginnoframeancestorsself",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "3837",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "POST",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1889",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_body_raw_post/1.6.0",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "3845",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "POST",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1889",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_body_raw_post/1.6.0",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "3851",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "POST",
        "evidence": "<script src=\"//ajax.googleapis.com/ajax/libs/angularjs/1.6.0/angular.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "1889",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_body_raw_post/1.6.0",
        "tags": {
          "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "//ajax.googleapis.com/ajax/libs/angularjs/1.6.0/angular.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "3852",
        "alertRef": "10017"
      },
      {
        "sourceid": "3",
        "other": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"q\" ].",
        "method": "POST",
        "evidence": "<form action=\"\" method=\"post\">",
        "pluginId": "10202",
        "cweid": "352",
        "confidence": "Low",
        "wascid": "9",
        "description": "No Anti-CSRF tokens were found in a HTML submission form.\nA cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.\n\nCSRF attacks are effective in a number of situations, including:\n    * The victim has an active session on the target site.\n    * The victim is authenticated via HTTP auth on the target site.\n    * The victim is on the same local network as the target site.\n\nCSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy.",
        "messageId": "1889",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_body_raw_post/1.6.0",
        "tags": {
          "OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
          "WSTG-v42-SESS-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/05-Testing_for_Cross_Site_Request_Forgery",
          "OWASP_2017_A05": "https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html"
        },
        "reference": "http://projects.webappsec.org/Cross-Site-Request-Forgery\nhttp://cwe.mitre.org/data/definitions/352.html",
        "solution": "Phase: Architecture and Design\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nFor example, use anti-CSRF packages such as the OWASP CSRFGuard.\n\nPhase: Implementation\nEnsure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script.\n\nPhase: Architecture and Design\nGenerate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330).\nNote that this can be bypassed using XSS.\n\nIdentify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.\nNote that this can be bypassed using XSS.\n\nUse the ESAPI Session Management control.\nThis control includes a component for CSRF.\n\nDo not use the GET method for any request that triggers a state change.\n\nPhase: Implementation\nCheck the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.",
        "alert": "Absence of Anti-CSRF Tokens",
        "param": "",
        "attack": "",
        "name": "Absence of Anti-CSRF Tokens",
        "risk": "Medium",
        "id": "3853",
        "alertRef": "10202"
      },
      {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "POST",
        "evidence": "<script src=\"//ajax.googleapis.com/ajax/libs/angularjs/1.6.0/angular.js\"></script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1889",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_body_raw_post/1.6.0",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "3854",
        "alertRef": "10109"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "POST",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1889",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_body_raw_post/1.6.0",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "3855",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "POST",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1889",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/angular/angular_body_raw_post/1.6.0",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "3856",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1894",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdomscripts/localStorage/property/documentWrite",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "3874",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1894",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdomscripts/localStorage/property/documentWrite",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "3875",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1901",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdomscripts/localStorage/function/documentWrite",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "3891",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1901",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdomscripts/localStorage/function/documentWrite",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "3893",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1906",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdomscripts/localStorage/function/innerHtml",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "3900",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1906",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdomscripts/localStorage/function/innerHtml",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "3903",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1912",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdomscripts/sessionStorage/array/eval",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "3927",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1915",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdomscripts/localStorage/function/eval",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "3928",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1912",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdomscripts/sessionStorage/array/eval",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "3929",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1915",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdomscripts/localStorage/function/eval",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "3930",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1916",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdomscripts/localStorage/array/eval",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "3931",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1916",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdomscripts/localStorage/array/eval",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "3932",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1918",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdomscripts/sessionStorage/function/eval",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "3937",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1918",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdomscripts/sessionStorage/function/eval",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "3942",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1921",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdomscripts/sessionStorage/function/innerHtml",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "3945",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1921",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdomscripts/sessionStorage/function/innerHtml",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "3947",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1926",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdomscripts/sessionStorage/property/documentWrite",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "3956",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1926",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdomscripts/sessionStorage/property/documentWrite",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "3959",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1928",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdomscripts/sessionStorage/function/documentWrite",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "3961",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1928",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/dom/toxicdomscripts/sessionStorage/function/documentWrite",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "3962",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1930",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/vulnerablelibraries/x",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "3963",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1930",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/vulnerablelibraries/x",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "3965",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "HTTP/1.1 500 Internal Server Error",
        "pluginId": "90022",
        "cweid": "200",
        "confidence": "Medium",
        "wascid": "13",
        "description": "This page contains an error/warning message that may disclose sensitive information like the location of the file that produced the unhandled exception. This information can be used to launch further attacks against the web application. The alert could be a false positive if the error message is found inside a documentation page.",
        "messageId": "1941",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/url/a",
        "tags": {
          "WSTG-v42-ERRH-02": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/08-Testing_for_Error_Handling/02-Testing_for_Stack_Traces",
          "WSTG-v42-ERRH-01": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/08-Testing_for_Error_Handling/01-Testing_For_Improper_Error_Handling",
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "",
        "solution": "Review the source code of this page. Implement custom error pages. Consider implementing a mechanism to provide a unique error reference/identifier to the client (browser) while logging the details on the server side and not exposing them to the user.",
        "alert": "Application Error Disclosure",
        "param": "",
        "attack": "",
        "name": "Application Error Disclosure",
        "risk": "Low",
        "id": "3989",
        "alertRef": "90022"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1941",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/url/a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "3991",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1939",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reverseclickjacking/jsonpendpoint?callback=foo&q",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "3992",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1941",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/url/a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "3993",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1939",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reverseclickjacking/jsonpendpoint?callback=foo&q",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "3995",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "The presence of the 'Age' header indicates that that a HTTP/1.1 compliant caching server is in use.",
        "method": "GET",
        "evidence": "Age: 9",
        "pluginId": "10050",
        "cweid": "-1",
        "confidence": "Medium",
        "wascid": "-1",
        "description": "The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as \"proxy\" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ",
        "messageId": "1938",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/",
        "tags": {
          "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttp://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html (obsoleted by rfc7234)",
        "solution": "Validate that the response does not contain sensitive, personal or user-specific information.  If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.",
        "alert": "Retrieved from Cache",
        "param": "",
        "attack": "",
        "name": "Retrieved from Cache",
        "risk": "Informational",
        "id": "4000",
        "alertRef": "10050"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1942",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reverseclickjacking/jsonpendpoint?callback=urc_button.click&q",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "4004",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1942",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reverseclickjacking/jsonpendpoint?callback=urc_button.click&q",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "4006",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1946",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/leakedcookie/leakedcookie.js",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "4020",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1946",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/leakedcookie/leakedcookie.js",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "4023",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "POST",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "messageId": "1953",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/form",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "X-Frame-Options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "4038",
        "alertRef": "10020-1"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1955",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/escapeHtml/a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "4039",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "POST",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1953",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/form",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "4040",
        "alertRef": "10038-1"
      },
      {
        "sourceid": "3",
        "other": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"q\" ].",
        "method": "POST",
        "evidence": "<form method=\"POST\">",
        "pluginId": "10202",
        "cweid": "352",
        "confidence": "Low",
        "wascid": "9",
        "description": "No Anti-CSRF tokens were found in a HTML submission form.\nA cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.\n\nCSRF attacks are effective in a number of situations, including:\n    * The victim has an active session on the target site.\n    * The victim is authenticated via HTTP auth on the target site.\n    * The victim is on the same local network as the target site.\n\nCSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy.",
        "messageId": "1953",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/form",
        "tags": {
          "OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
          "WSTG-v42-SESS-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/05-Testing_for_Cross_Site_Request_Forgery",
          "OWASP_2017_A05": "https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html"
        },
        "reference": "http://projects.webappsec.org/Cross-Site-Request-Forgery\nhttp://cwe.mitre.org/data/definitions/352.html",
        "solution": "Phase: Architecture and Design\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nFor example, use anti-CSRF packages such as the OWASP CSRFGuard.\n\nPhase: Implementation\nEnsure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script.\n\nPhase: Architecture and Design\nGenerate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330).\nNote that this can be bypassed using XSS.\n\nIdentify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.\nNote that this can be bypassed using XSS.\n\nUse the ESAPI Session Management control.\nThis control includes a component for CSRF.\n\nDo not use the GET method for any request that triggers a state change.\n\nPhase: Implementation\nCheck the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.",
        "alert": "Absence of Anti-CSRF Tokens",
        "param": "",
        "attack": "",
        "name": "Absence of Anti-CSRF Tokens",
        "risk": "Medium",
        "id": "4043",
        "alertRef": "10202"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "POST",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1953",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/form",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "4045",
        "alertRef": "10035"
      },
      {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "POST",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1953",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/reflected/parameter/form",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "X-Content-Type-Options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "4046",
        "alertRef": "10021"
      },
      {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1960",
        "inputVector": "",
        "url": "https://public-firing-range.appspot.com/escape/serverside/encodeUrl/a",
        "tags": {
          "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
          "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "4060",
        "alertRef": "10035"
      }
    ]
  }
}
